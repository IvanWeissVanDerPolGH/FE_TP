File: favicon.ico
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\favicon.ico
Content:
--------------------------------------------------------------------------------
File: index.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\index.html
Content:
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>PatientTrackingSystem</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
  integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />
</head>
<body>
  <app-root></app-root>
</body>
</html>


--------------------------------------------------------------------------------
File: main.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\main.ts
Content:
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';


platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));


--------------------------------------------------------------------------------
File: merged_textfile.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\merged_textfile.txt
Content:


--------------------------------------------------------------------------------
File: print.py
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\print.py
Content:
import os

def merge_files(startpath, output_file):
    with open(output_file, 'w', encoding='utf-8') as f:
        for root, _, files in os.walk(startpath):
            for file in files:
                file_path = os.path.join(root, file)
                f.write(f'File: {file}\n')
                f.write(f'Path: {file_path}\n')
                f.write('Content:\n')
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file_content:
                        f.write(f'{file_content.read()}\n')
                except Exception as e:
                    f.write(f'Error reading file: {e}\n')
                f.write('\n' + '-'*80 + '\n')  # Add a separator between files

# Get the path of the current script
script_path = os.path.dirname(os.path.abspath(__file__))

# Specify the output text file
output_file = os.path.join(script_path, 'merged_textfile.txt')

# Merge the content of all sub-files into the specified text file
merge_files(script_path, output_file)


--------------------------------------------------------------------------------
File: styles.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\styles.css
Content:
/* You can add global styles to this file, and also import other style files */
/*@import "~bootstrap/dist/css/bootstrap.css";
*/
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    position: relative;
    font-family: 'Roboto', sans-serif;
}

.card-gral {
    display: flex;
    flex-direction: column;
    border-radius: .5rem;
    background-color: #fff;
    margin: 1.25rem 0 1.25rem 0;
    box-shadow: 0 .25rem .5rem #e6edef;
    max-width: 900px;
    margin: 0 auto;
    min-width: 250px;

    .card-gral-head {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #edf1f7;
        font-size: 1rem;
        font-weight: 600;
    }

    .card-gral-body {
        padding: 1rem 1.5rem;
    }
}



--------------------------------------------------------------------------------
File: app-routing.module.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\app-routing.module.ts
Content:
import { Component, NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ConsultaComponent } from './components/consulta/consulta.component';
import { HomeComponent } from './components/home/home.component';
import { RegistroDePersonasComponent } from './components/registro-de-personas/registro-de-personas.component';
import { ReservaDeTurnosComponent } from './components/reserva-de-turnos/reserva-de-turnos.component';
import { FichaClinicaComponent } from './components/ficha-clinica/ficha-clinica.component';

const routes: Routes = [
  { path: '', component: HomeComponent }, // Redirect to 'home' by default
  { path: 'consultas', component: ConsultaComponent }, // Replace 'ConsultaComponent' with your component
  { path: 'registro-de-personas', component: RegistroDePersonasComponent},
  { path: 'reserva-de-turnos', component: ReservaDeTurnosComponent},
  { path: 'ficha-clinica', component: FichaClinicaComponent},
  // Add more routes for other components/pages as needed
];


@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


--------------------------------------------------------------------------------
File: app.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\app.component.css
Content:


--------------------------------------------------------------------------------
File: app.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\app.component.html
Content:
<header>
</header>

<main>
  <!-- The router-outlet is a placeholder for displaying the current route's component -->
  <app-sidenav (onToggleSideNav)="onToggleSideNav($event)"></app-sidenav>
  <app-body
    [collapsed] = "isSideNavCollapsed"
    [screenWidth] = "screenWidth"
  >
  </app-body>
  <router-outlet></router-outlet>
  <app-footer
    [collapsed] = "isSideNavCollapsed"
    [screenWidth] = "screenWidth"
  >
  </app-footer>
</main>


--------------------------------------------------------------------------------
File: app.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\app.component.ts
Content:
import { Component } from '@angular/core';

interface SideNavToggle{
  screenWidth: number;
  collapsed: boolean;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'patient-tracking-system';

  isSideNavCollapsed = false;
  screenWidth = 0;

  onToggleSideNav(data: SideNavToggle):void{
    this.screenWidth = data.screenWidth;
    this.isSideNavCollapsed = data.collapsed;
  }
}


--------------------------------------------------------------------------------
File: app.module.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\app.module.ts
Content:
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HomeComponent } from './components/home/home.component';
import { ConsultaComponent } from './components/consulta/consulta.component';
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RegistroDePersonasComponent } from './components/registro-de-personas/registro-de-personas.component';
import { ReservaDeTurnosComponent } from './components/reserva-de-turnos/reserva-de-turnos.component';
import { FichaClinicaComponent } from './components/ficha-clinica/ficha-clinica.component';
import { BodyComponent } from './body/body.component';
import { SidenavComponent } from './sidenav/sidenav.component';
import { FooterComponent } from './footer/footer.component';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    ConsultaComponent,
    RegistroDePersonasComponent,
    ReservaDeTurnosComponent,
    FichaClinicaComponent,
    BodyComponent,
    SidenavComponent,
    FooterComponent
  ],
  imports: [
    BrowserModule,
    BrowserAnimationsModule,
    AppRoutingModule,
    RouterModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


--------------------------------------------------------------------------------
File: app.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\app.txt
Content:
app-routing.module.ts
import { Component, NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ConsultaComponent } from './components/consulta/consulta.component';
import { HomeComponent } from './components/home/home.component';
import { RegistroDePersonasComponent } from './components/registro-de-personas/registro-de-personas.component';
import { ReservaDeTurnosComponent } from './components/reserva-de-turnos/reserva-de-turnos.component';
import { FichaClinicaComponent } from './components/ficha-clinica/ficha-clinica.component';

const routes: Routes = [
  { path: '', component: HomeComponent }, // Redirect to 'home' by default
  { path: 'consultas', component: ConsultaComponent }, // Replace 'ConsultaComponent' with your component
  { path: 'registro-de-personas', component: RegistroDePersonasComponent},
  { path: 'reserva-de-turnos', component: ReservaDeTurnosComponent},
  { path: 'ficha-clinica', component: FichaClinicaComponent},
  // Add more routes for other components/pages as needed
];


@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


app.component.css


app.component.html
<header>
</header>

<main>
  <!-- The router-outlet is a placeholder for displaying the current route's component -->
  <app-sidenav (onToggleSideNav)="onToggleSideNav($event)"></app-sidenav>
  <app-body
    [collapsed] = "isSideNavCollapsed"
    [screenWidth] = "screenWidth"
  >
  </app-body>
  <router-outlet></router-outlet>
  <app-footer
    [collapsed] = "isSideNavCollapsed"
    [screenWidth] = "screenWidth"
  >
  </app-footer>
</main>


app.component.ts
import { Component } from '@angular/core';

interface SideNavToggle{
  screenWidth: number;
  collapsed: boolean;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'patient-tracking-system';

  isSideNavCollapsed = false;
  screenWidth = 0;

  onToggleSideNav(data: SideNavToggle):void{
    this.screenWidth = data.screenWidth;
    this.isSideNavCollapsed = data.collapsed;
  }
}


app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HomeComponent } from './components/home/home.component';
import { ConsultaComponent } from './components/consulta/consulta.component';
import { RouterModule } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RegistroDePersonasComponent } from './components/registro-de-personas/registro-de-personas.component';
import { ReservaDeTurnosComponent } from './components/reserva-de-turnos/reserva-de-turnos.component';
import { FichaClinicaComponent } from './components/ficha-clinica/ficha-clinica.component';
import { BodyComponent } from './body/body.component';
import { SidenavComponent } from './sidenav/sidenav.component';
import { FooterComponent } from './footer/footer.component';

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    ConsultaComponent,
    RegistroDePersonasComponent,
    ReservaDeTurnosComponent,
    FichaClinicaComponent,
    BodyComponent,
    SidenavComponent,
    FooterComponent
  ],
  imports: [
    BrowserModule,
    BrowserAnimationsModule,
    AppRoutingModule,
    RouterModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }




--------------------------------------------------------------------------------
File: body.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\body\body.component.css
Content:
.body{
  width: calc(100% - 6rem);
  min-height: 100vh;
  height: auto;
  margin-left: 5rem;
  z-index: 0;
  position: relative;
  top: 0;
  transition: all .5s ease;
  background: #a3abc0ff;
  padding: 3rem;
}

.body-trimmed{
  width: calc(100% - 17rem);
  margin-left: 17rem;
}

.body-md-screen{
  width: calc(100% - 6rem);
  margin-left: 6rem;
}


--------------------------------------------------------------------------------
File: body.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\body\body.component.html
Content:
<div class="body" [ngClass]="getBodyClass()">
  <router-outlet></router-outlet>
</div>


--------------------------------------------------------------------------------
File: body.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\body\body.component.ts
Content:
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-body',
  templateUrl: './body.component.html',
  styleUrls: ['./body.component.css']
})
export class BodyComponent {
  constructor(){}
  ngOnInit(): void{}

  @Input() collapsed = false;
  @Input() screenWidth = 0;


  getBodyClass(): string{
    let styleClass = '';
    if(this.collapsed && this.screenWidth > 768){
      styleClass = 'body-trimmed';
    } else if(this.collapsed && this.screenWidth <= 768 && this.screenWidth > 0){
      styleClass = 'body-md-screen';
    }
    return styleClass;
  }
}


--------------------------------------------------------------------------------
File: body.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\body\body.txt
Content:
body.component.css
.body{
  width: calc(100% - 6rem);
  min-height: 100vh;
  height: auto;
  margin-left: 5rem;
  z-index: 0;
  position: relative;
  top: 0;
  transition: all .5s ease;
  background: #a3abc0ff;
  padding: 3rem;
}

.body-trimmed{
  width: calc(100% - 17rem);
  margin-left: 17rem;
}

.body-md-screen{
  width: calc(100% - 6rem);
  margin-left: 6rem;
}


body.component.html
<div class="body" [ngClass]="getBodyClass()">
  <router-outlet></router-outlet>
</div>


body.component.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-body',
  templateUrl: './body.component.html',
  styleUrls: ['./body.component.css']
})
export class BodyComponent {
  constructor(){}
  ngOnInit(): void{}

  @Input() collapsed = false;
  @Input() screenWidth = 0;


  getBodyClass(): string{
    let styleClass = '';
    if(this.collapsed && this.screenWidth > 768){
      styleClass = 'body-trimmed';
    } else if(this.collapsed && this.screenWidth <= 768 && this.screenWidth > 0){
      styleClass = 'body-md-screen';
    }
    return styleClass;
  }
}




--------------------------------------------------------------------------------
File: components.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\components.txt
Content:


--------------------------------------------------------------------------------
File: consulta.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\consulta\consulta.component.css
Content:
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}
.container {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.consulta-form {
  margin-top: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  flex-wrap: wrap;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  font-weight: bold;
}

.consulta-table {
  width: 100%;
  margin-top: 20px;
  border-collapse: collapse;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.consulta-table th,
.consulta-table td {
  padding: 10px;
  text-align: center;
}

.consulta-table th {
  background-color: #f0f0f0;
  font-weight: bold;
}

.btn {
  padding: 5px 10px;
  margin-right: 5px;
  border-radius: 3px;
  cursor: pointer;
}

.btn-primary {
  background-color: #007bff;
  color: #fff;
  border: none;
}

.btn-info {
  background-color: #17a2b8;
  color: #fff;
  border: none;
}

.btn-success {
  background-color: #28a745;
  color: #fff;
  border: none;
}

.btn-danger {
  background-color: #dc3545;
  color: #fff;
  border: none;
}

input[type="text"],
input[type="date"],
input[type="number"],
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}


--------------------------------------------------------------------------------
File: consulta.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\consulta\consulta.component.html
Content:
<!--
<div>
  <h2>Categorias de Consultas</h2>

  <form (ngSubmit)="addConsulta()" #consultaForm="ngForm">
    <div class="form-group">
      <label for="idCategoria">ID de Categoría:</label>
      <input type="number" id="idCategoria" name="idCategoria" [(ngModel)]="newConsulta.id" required>
    </div>
    <div class="form-group">
      <label for="descripcion">Descripción:</label>
      <input type="text" id="descripcion" name="descripcion" [(ngModel)]="newConsulta.descripcion" required>
    </div>
    <button type="submit" class="btn btn-primary">Agregar Categoria</button>
  </form>

  <table>
    <thead>
      <tr>
        <th>ID Category</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let consulta of listaDeConsultas; let i = index">
        <td>
          <span *ngIf="!consulta.isEditing">{{ consulta.id }}</span>
          <input *ngIf="consulta.isEditing" type="number" [(ngModel)]="consulta.id">
        </td>
        <td>
          <span *ngIf="!consulta.isEditing">{{ consulta.descripcion }}</span>
          <input *ngIf="consulta.isEditing" type="text" [(ngModel)]="consulta.descripcion">
        </td>
        <td>
          <button *ngIf="!consulta.isEditing" (click)="editConsulta(consulta)">Edit</button>
          <button *ngIf="consulta.isEditing" (click)="updateConsulta(consulta, i)">Update</button>
          <button (click)="deleteConsulta(consulta.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>
-->

<div class="container">
  <h2>Categoria de Consultas</h2>

  <form (ngSubmit)="addConsulta()" #consultaForm="ngForm" class="consulta-form">
    <div class="form-group">
      <label for="idCategoria">Id Categoría:</label>
      <input type="number" id="idCategoria" name="idCategoria" [(ngModel)]="newConsulta.id" required >
    </div>
    <div class="form-group">
      <label for="descripcion">Descripción:</label>
      <input type="text" id="descripcion" name="descripcion" [(ngModel)]="newConsulta.descripcion" required>
    </div>
    <button type="submit" class="btn btn-primary">Agregar Categoria</button>
  </form>

  <div class="consulta-form">
    <table class="consulta-table">
      <thead>
        <tr>
          <th>Id Categoria</th>
          <th>Descripcion</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let consulta of listaDeConsultas; let i = index">
          <td>
            <span *ngIf="!consulta.isEditing">{{ consulta.id }}</span>
            <input *ngIf="consulta.isEditing" type="number" [(ngModel)]="consulta.id" class="form-control">
          </td>
          <td>
            <span *ngIf="!consulta.isEditing">{{ consulta.descripcion }}</span>
            <input *ngIf="consulta.isEditing" type="text" [(ngModel)]="consulta.descripcion" class="form-control">
          </td>
          <td>
            <button *ngIf="!consulta.isEditing" (click)="editConsulta(consulta)" class="btn btn-info">Editar</button>
            <button *ngIf="consulta.isEditing" (click)="updateConsulta(consulta, i)" class="btn btn-success">Modificar</button>
            <button (click)="deleteConsulta(consulta.id)" class="btn btn-danger">Eliminar</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>




--------------------------------------------------------------------------------
File: consulta.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\consulta\consulta.component.ts
Content:
import { Component, OnInit } from '@angular/core';
import { ConsultaService } from 'src/app/components/consulta/consulta.service';
import { Categoria } from './consulta.interface';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-consulta',
  templateUrl: './consulta.component.html',
  styleUrls: ['./consulta.component.css']
})


export class ConsultaComponent implements OnInit{
  newConsulta: Categoria = { id: -1, descripcion: '' ,isEditing: false}; // Initialize a new consultation
  listaDeConsultas: Categoria[] = [];

  constructor(private ConsultaService: ConsultaService) {}

  ngOnInit(): void {
    this.loadConsultas();
    this.sortConsultasById()
  }


  // Sort the listaDeConsultas array by id
  sortConsultasById(): void {
    this.listaDeConsultas.sort((a, b) => a.id - b.id);
  }
  // Read operation: Load the list of consultations
  loadConsultas(): void {
    this.ConsultaService.getConsultas_sample().subscribe((consultas) => {
      this.listaDeConsultas = consultas;
      this.sortConsultasById();
    });
  }

  // Create operation: Add a new consultation
  addConsulta(): void {
    this.ConsultaService.addConsulta(this.newConsulta).subscribe((updatedConsultas) => {
      // Optionally, you can handle the response here and update the list
      this.listaDeConsultas = updatedConsultas;
      this.newConsulta = { id: -1, descripcion: '' ,isEditing: false}; // Clear the form
      this.sortConsultasById();
    });
  }

  // Edit operation: Enable editing for a consultation
  editConsulta(consulta: Categoria): void {
    consulta.isEditing = true;
    this.sortConsultasById();
  }

  // Update operation: Apply changes to a consultation
  updateConsulta(consulta: Categoria, index: number): void {
    // Send the updated consultation to the service for processing
    this.ConsultaService.updateConsulta(consulta).subscribe(() => {
      // Optionally, you can handle the response here and update the list
      this.listaDeConsultas[index].isEditing = false; // Disable editing mode
      this.sortConsultasById();
    });
  }

  // Delete operation: Remove a consultation by id
  deleteConsulta(id: number): Observable<Categoria[]> {
    // Find the index of the consultation with the matching id
    const index = this.listaDeConsultas.findIndex(consulta => consulta.id === id);

    if (index !== -1) {
      // If the consultation is found, remove it from the array
      this.listaDeConsultas.splice(index, 1);
    }

    // Return the updated list of consultations as an observable
    return new Observable<Categoria[]>(observer => {
      observer.next(this.listaDeConsultas);
      observer.complete();
    });
  }
}


--------------------------------------------------------------------------------
File: consulta.interface.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\consulta\consulta.interface.ts
Content:
export interface Categoria {
  isEditing: boolean;
  id: number;
  descripcion: string;
}


--------------------------------------------------------------------------------
File: consulta.service.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\consulta\consulta.service.ts
Content:
import { Data_consulta } from '../../../assets/data/consulta/data_consulta';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Categoria } from 'src/app/components/consulta/consulta.interface';

@Injectable({
  providedIn: 'root'
})
export class ConsultaService {

  private listaDataConsulta: Categoria[]
  // constructor(private http: HttpClient) {}
  constructor() {
    this.listaDataConsulta = Data_consulta
  }

  getConsultas_sample(): Observable<Categoria[]> {
    // Return the data from the Data_consulta constant as an observable
    return new Observable<Categoria[]>(observer => {
      observer.next(this.listaDataConsulta);
      observer.complete();
    });
  }

  //metodo para obtener la lista de categorias, usada para otros componentes
  getCategorias(): Observable<Categoria[]>{
      return this.getConsultas_sample();
  }

    // Create operation: Add a new consultation
    addConsulta(consulta: Categoria): Observable<Categoria[]> {

      this.listaDataConsulta.push(consulta);
      // You can optionally return the added consultation
      return new Observable<Categoria[]>(observer => {
        observer.next(this.listaDataConsulta);
        observer.complete();
      });
    }


    // Update operation: Update a consultation by idCategoria
  updateConsulta(consultaToUpdate: Categoria): Observable<Categoria[]> {
    // Find the index of the consultation with the matching idCategoria
    const index = this.listaDataConsulta.findIndex(consulta => consulta.id === consultaToUpdate.id);

    if (index !== -1) {
      // If the consultation is found, update its properties
      this.listaDataConsulta[index].descripcion = consultaToUpdate.descripcion;
    }

    // Return the updated list of consultations as an observable
    return new Observable<Categoria[]>(observer => {
      observer.next(this.listaDataConsulta);
      observer.complete();
    });
  }
}


--------------------------------------------------------------------------------
File: consulta.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\consulta\consulta.txt
Content:
consulta.component.css
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}
.container {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.consulta-form {
  margin-top: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  flex-wrap: wrap;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  font-weight: bold;
}

.consulta-table {
  width: 100%;
  margin-top: 20px;
  border-collapse: collapse;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.consulta-table th,
.consulta-table td {
  padding: 10px;
  text-align: center;
}

.consulta-table th {
  background-color: #f0f0f0;
  font-weight: bold;
}

.btn {
  padding: 5px 10px;
  margin-right: 5px;
  border-radius: 3px;
  cursor: pointer;
}

.btn-primary {
  background-color: #007bff;
  color: #fff;
  border: none;
}

.btn-info {
  background-color: #17a2b8;
  color: #fff;
  border: none;
}

.btn-success {
  background-color: #28a745;
  color: #fff;
  border: none;
}

.btn-danger {
  background-color: #dc3545;
  color: #fff;
  border: none;
}

input[type="text"],
input[type="date"],
input[type="number"],
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}


consulta.component.html
<!--
<div>
  <h2>Categorias de Consultas</h2>

  <form (ngSubmit)="addConsulta()" #consultaForm="ngForm">
    <div class="form-group">
      <label for="idCategoria">ID de Categoría:</label>
      <input type="number" id="idCategoria" name="idCategoria" [(ngModel)]="newConsulta.id" required>
    </div>
    <div class="form-group">
      <label for="descripcion">Descripción:</label>
      <input type="text" id="descripcion" name="descripcion" [(ngModel)]="newConsulta.descripcion" required>
    </div>
    <button type="submit" class="btn btn-primary">Agregar Categoria</button>
  </form>

  <table>
    <thead>
      <tr>
        <th>ID Category</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let consulta of listaDeConsultas; let i = index">
        <td>
          <span *ngIf="!consulta.isEditing">{{ consulta.id }}</span>
          <input *ngIf="consulta.isEditing" type="number" [(ngModel)]="consulta.id">
        </td>
        <td>
          <span *ngIf="!consulta.isEditing">{{ consulta.descripcion }}</span>
          <input *ngIf="consulta.isEditing" type="text" [(ngModel)]="consulta.descripcion">
        </td>
        <td>
          <button *ngIf="!consulta.isEditing" (click)="editConsulta(consulta)">Edit</button>
          <button *ngIf="consulta.isEditing" (click)="updateConsulta(consulta, i)">Update</button>
          <button (click)="deleteConsulta(consulta.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>
-->

<div class="container">
  <h2>Categoria de Consultas</h2>

  <form (ngSubmit)="addConsulta()" #consultaForm="ngForm" class="consulta-form">
    <div class="form-group">
      <label for="idCategoria">Id Categoría:</label>
      <input type="number" id="idCategoria" name="idCategoria" [(ngModel)]="newConsulta.id" required >
    </div>
    <div class="form-group">
      <label for="descripcion">Descripción:</label>
      <input type="text" id="descripcion" name="descripcion" [(ngModel)]="newConsulta.descripcion" required>
    </div>
    <button type="submit" class="btn btn-primary">Agregar Categoria</button>
  </form>

  <div class="consulta-form">
    <table class="consulta-table">
      <thead>
        <tr>
          <th>Id Categoria</th>
          <th>Descripcion</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let consulta of listaDeConsultas; let i = index">
          <td>
            <span *ngIf="!consulta.isEditing">{{ consulta.id }}</span>
            <input *ngIf="consulta.isEditing" type="number" [(ngModel)]="consulta.id" class="form-control">
          </td>
          <td>
            <span *ngIf="!consulta.isEditing">{{ consulta.descripcion }}</span>
            <input *ngIf="consulta.isEditing" type="text" [(ngModel)]="consulta.descripcion" class="form-control">
          </td>
          <td>
            <button *ngIf="!consulta.isEditing" (click)="editConsulta(consulta)" class="btn btn-info">Editar</button>
            <button *ngIf="consulta.isEditing" (click)="updateConsulta(consulta, i)" class="btn btn-success">Modificar</button>
            <button (click)="deleteConsulta(consulta.id)" class="btn btn-danger">Eliminar</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>




consulta.component.ts
import { Component, OnInit } from '@angular/core';
import { ConsultaService } from 'src/app/components/consulta/consulta.service';
import { Categoria } from './consulta.interface';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-consulta',
  templateUrl: './consulta.component.html',
  styleUrls: ['./consulta.component.css']
})


export class ConsultaComponent implements OnInit{
  newConsulta: Categoria = { id: -1, descripcion: '' ,isEditing: false}; // Initialize a new consultation
  listaDeConsultas: Categoria[] = [];

  constructor(private ConsultaService: ConsultaService) {}

  ngOnInit(): void {
    this.loadConsultas();
    this.sortConsultasById()
  }


  // Sort the listaDeConsultas array by id
  sortConsultasById(): void {
    this.listaDeConsultas.sort((a, b) => a.id - b.id);
  }
  // Read operation: Load the list of consultations
  loadConsultas(): void {
    this.ConsultaService.getConsultas_sample().subscribe((consultas) => {
      this.listaDeConsultas = consultas;
      this.sortConsultasById();
    });
  }

  // Create operation: Add a new consultation
  addConsulta(): void {
    this.ConsultaService.addConsulta(this.newConsulta).subscribe((updatedConsultas) => {
      // Optionally, you can handle the response here and update the list
      this.listaDeConsultas = updatedConsultas;
      this.newConsulta = { id: -1, descripcion: '' ,isEditing: false}; // Clear the form
      this.sortConsultasById();
    });
  }

  // Edit operation: Enable editing for a consultation
  editConsulta(consulta: Categoria): void {
    consulta.isEditing = true;
    this.sortConsultasById();
  }

  // Update operation: Apply changes to a consultation
  updateConsulta(consulta: Categoria, index: number): void {
    // Send the updated consultation to the service for processing
    this.ConsultaService.updateConsulta(consulta).subscribe(() => {
      // Optionally, you can handle the response here and update the list
      this.listaDeConsultas[index].isEditing = false; // Disable editing mode
      this.sortConsultasById();
    });
  }

  // Delete operation: Remove a consultation by id
  deleteConsulta(id: number): Observable<Categoria[]> {
    // Find the index of the consultation with the matching id
    const index = this.listaDeConsultas.findIndex(consulta => consulta.id === id);

    if (index !== -1) {
      // If the consultation is found, remove it from the array
      this.listaDeConsultas.splice(index, 1);
    }

    // Return the updated list of consultations as an observable
    return new Observable<Categoria[]>(observer => {
      observer.next(this.listaDeConsultas);
      observer.complete();
    });
  }
}


consulta.interface.ts
export interface Categoria {
  isEditing: boolean;
  id: number;
  descripcion: string;
}


consulta.service.ts
import { Data_consulta } from '../../../assets/data/consulta/data_consulta';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Categoria } from 'src/app/components/consulta/consulta.interface';

@Injectable({
  providedIn: 'root'
})
export class ConsultaService {

  private listaDataConsulta: Categoria[]
  // constructor(private http: HttpClient) {}
  constructor() {
    this.listaDataConsulta = Data_consulta
  }

  getConsultas_sample(): Observable<Categoria[]> {
    // Return the data from the Data_consulta constant as an observable
    return new Observable<Categoria[]>(observer => {
      observer.next(this.listaDataConsulta);
      observer.complete();
    });
  }

  //metodo para obtener la lista de categorias, usada para otros componentes
  getCategorias(): Observable<Categoria[]>{
      return this.getConsultas_sample();
  }

    // Create operation: Add a new consultation
    addConsulta(consulta: Categoria): Observable<Categoria[]> {

      this.listaDataConsulta.push(consulta);
      // You can optionally return the added consultation
      return new Observable<Categoria[]>(observer => {
        observer.next(this.listaDataConsulta);
        observer.complete();
      });
    }


    // Update operation: Update a consultation by idCategoria
  updateConsulta(consultaToUpdate: Categoria): Observable<Categoria[]> {
    // Find the index of the consultation with the matching idCategoria
    const index = this.listaDataConsulta.findIndex(consulta => consulta.id === consultaToUpdate.id);

    if (index !== -1) {
      // If the consultation is found, update its properties
      this.listaDataConsulta[index].descripcion = consultaToUpdate.descripcion;
    }

    // Return the updated list of consultations as an observable
    return new Observable<Categoria[]>(observer => {
      observer.next(this.listaDataConsulta);
      observer.complete();
    });
  }
}




--------------------------------------------------------------------------------
File: ficha-clinica-filtro.interface.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\ficha-clinica\ficha-clinica-filtro.interface.ts
Content:
import { Categoria } from "../consulta/consulta.interface";

export interface FichaClinicaFiltro {
    doctor: string; // Nombre del doctor
    paciente: string; // Nombre del paciente
    fechaDesde: string; // Fecha de la reserva
    fechaHasta: string; // Horario de la reserva (por ejemplo, "09:00 - 10:00")
    categoria: number;
  }
  

--------------------------------------------------------------------------------
File: ficha-clinica.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\ficha-clinica\ficha-clinica.component.css
Content:
/* Estilos generales para la página */
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}

.container {
  min-width: 850px;
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Estilos para filtros y formulario de reserva */
.filters, .clinical-record-form {
  margin-top: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  flex-wrap: wrap;
}

.filter-item, .form-item {
  margin-bottom: 15px;
}

/* Estilos para botones */
button {
  padding: 5px 10px;
  margin-right: 5px;
  margin-top: 5px;
  border-radius: 3px;
  cursor: pointer;
  background-color: #007bff;
  color: #fff;
  border: none;
}

/* Estilos para tablas */
table {
  width: 100%;
  border-collapse: collapse;
  padding: 10px;
}

th, td {
  padding: 10px;
  text-align: center;
  border: 0px solid #ddd;
}

th {
  background-color: #f0f0f0;
  font-weight: bold;
}

/* Estilos para selects */
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para etiquetas y campos de entrada */
label {
  font-weight: bold;
}

input[type="text"],
input[type="date"],
input[type="email"],
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para botones específicos */
button.btn-info {
  background-color: #17a2b8;
}

button.btn-success {
  background-color: #28a745;
}

button.btn-danger {
  background-color: #dc3545;
}


--------------------------------------------------------------------------------
File: ficha-clinica.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\ficha-clinica\ficha-clinica.component.html
Content:
<!---->
<!-- Filtros --1>
<div class="filters">
  <h2>Filter Options</h2>
  <label for="doctorFilter">Doctor:</label>
  <input type="text" id="doctorFilter" [(ngModel)]="filtros.doctor" (input)="applyFilters()">

  <label for="pacienteFilter">Paciente:</label>
  <input type="text" id="pacienteFilter" [(ngModel)]="filtros.paciente" (input)="applyFilters()">

  <label for="fechaDesdeFilter">Fecha desde:</label>
  <input type="date" id="fechaDesdeFilter" [(ngModel)]="filtros.fechaDesde" (input)="applyFilters()">

  <label for="fechaHastaFilter">Fecha hasta:</label>
  <input type="date" id="fechaHastaFilter" [(ngModel)]="filtros.fechaHasta" (input)="applyFilters()">

  <label for="categoriaFilter">Categoria:</label>
  <select id="categoriaFilter" [(ngModel)]="filtros.categoria" (change)="applyFilters()">
    <option value="">Selecciona una categoría</option>
    <ng-container *ngFor="let categoria of categorias">
      <option [value]="categoria.id">{{ categoria.descripcion }}</option>
    </ng-container>
  </select>
</div>

<!-- Agregar Ficha Clínica con reserva--1>
<div class="clinical-record-form">
  <h2>Agregar Ficha Clínica con Reserva</h2>
  <form (submit)="agregarFichaClinicaConReserva()">
    <label for="reserva">Reserva:</label>
    <select id="reserva" [(ngModel)]="nuevaFichaClinica.reserva" name="reserva">
      <option value="">Selecciona una reserva</option>
      <ng-container *ngFor="let reserva of reservasDeTurno">
        <option [ngValue]="reserva">{{ reserva.doctor.nombre }} {{ reserva.doctor.apellido }} - {{ reserva.paciente.nombre }} {{ reserva.paciente.apellido }} - {{ reserva.fecha | date: "dd/MM/yyyy" }} - {{ reserva.hora }}</option>
      </ng-container>
    </select>

    <label for="motivoConsulta">Motivo de Consulta:</label>
    <input type="text" id="motivoConsulta" [(ngModel)]="nuevaFichaClinica.motivoConsulta" name="motivoConsulta">

    <label for="diagnostico">Diagnóstico:</label>
    <input type="text" id="diagnostico" [(ngModel)]="nuevaFichaClinica.diagnostico" name="diagnostico">

    <label for="categoria">Categoría:</label>
    <select id="categoria" [(ngModel)]="nuevaFichaClinica.categoria" name="categoria">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [ngValue]="categoria">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>

    <button type="submit" id="addClinicalRecordButton">Agregar Ficha Clínica</button>
  </form>
</div>

<!-- Agregar Ficha Clínica sin reserva--1>
<div class="clinical-record-form-2">
  <h2>Agregar Ficha Clínica sin Reserva</h2>
  <form (submit)="agregarFichaClinica()">
    <label for="Doctor">Doctor:</label>
    <select id="doctor" [(ngModel)]="nuevaFichaClinica.doctor" name="doctor">
      <option value="">Selecciona un Doctor</option>
      <ng-container *ngFor="let persona of personas">
        <ng-container *ngIf="persona.flag_es_doctor">
          <option [ngValue]="persona">{{ persona.nombre + ' ' + persona.apellido }}</option>
        </ng-container>
      </ng-container>
    </select>

    <label for="Paciente">Paciente:</label>
    <select id="paciente" [(ngModel)]="nuevaFichaClinica.paciente" name="paciente">
      <option value="">Selecciona un Paciente</option>
      <ng-container *ngFor="let persona of personas">
        <ng-container *ngIf="!persona.flag_es_doctor">
          <option [ngValue]="persona">{{ persona.nombre + ' ' + persona.apellido }}</option>
        </ng-container>
      </ng-container>
    </select>

    <label for="motivoConsulta">Motivo de Consulta:</label>
    <input type="text" id="motivoConsulta" [(ngModel)]="nuevaFichaClinica.motivoConsulta" name="motivoConsulta">

    <label for="diagnostico">Diagnóstico:</label>
    <input type="text" id="diagnostico" [(ngModel)]="nuevaFichaClinica.diagnostico" name="diagnostico">

    <label for="categoria">Categoría:</label>
    <select id="categoria" [(ngModel)]="nuevaFichaClinica.categoria" name="categoria">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [ngValue]="categoria">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>

    <label for="date">Fecha:</label>
      <input type="date" id="reservanueva_date" [(ngModel)]="nuevaFichaClinica.fecha" name="date">

    <button type="submit" id="addClinicalRecordButton">Agregar Ficha Clínica</button>
  </form>
</div>

<!-- boton para descargar el excel de las fichas filtradas  --1>
<button (click)="exportExcel()">Descargar Excel de las fichas filtradas</button>

<!-- boton para descargar el PDF de las fichas filtradas  --1>
<button (click)="exportPDF()">Descargar PDF de las fichas filtradas</button>

<!-- Lista de Fichas Clínicas --1>
<div id="Exportar">
<h2>Tabla de Fichas Clínicas</h2>
<table>
  <thead>
    <tr>
      <th>Doctor</th>
      <th>Paciente</th>
      <th>Fecha</th>
      <th>Motivo de Consulta</th>
      <th>Diagnóstico</th>
      <th>Categoría</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let fichaClinica of fichasClinicasFiltradas; let i = index">
      <td>{{ fichaClinica.doctor.nombre }} {{fichaClinica.doctor.apellido}}</td>
      <td>{{ fichaClinica.paciente.nombre }} {{fichaClinica.paciente.apellido}}</td>
      <td>{{ fichaClinica.fecha | date: "dd/MM/yyyy"}}</td>
      <td>{{ fichaClinica.motivoConsulta }}</td>
      <td>{{ fichaClinica.diagnostico }}</td>
      <td>{{ fichaClinica.categoria.descripcion }}</td>
    </tr>
  </tbody>
</table>
</div>
-->

<div class="container">
  <h2 class="section-title">Ficha Clínica de Pacientes</h2>
<!-- Agregar Ficha Clínica con reserva-->
<div class="clinical-record-form">
  <h2 class="section-title">Con reserva</h2>
  <form (submit)="agregarFichaClinicaConReserva()">
    <label for="reserva" class="label">Reserva:</label>
    <select id="reserva" [(ngModel)]="nuevaFichaClinica.reserva" name="reserva" class="select">
      <option value="">Selecciona una reserva</option>
      <ng-container *ngFor="let reserva of reservasDeTurno">
        <option [ngValue]="reserva" class="option">
          {{ reserva.doctor.nombre }} {{ reserva.doctor.apellido }} - {{ reserva.paciente.nombre }} {{ reserva.paciente.apellido }} - {{ reserva.fecha | date: "dd/MM/yyyy" }} - {{ reserva.hora }}
        </option>
      </ng-container>
    </select>

    <label for="motivoConsulta" class="label">Motivo de Consulta:</label>
    <input type="text" id="motivoConsulta" [(ngModel)]="nuevaFichaClinica.motivoConsulta" name="motivoConsulta" class="input-text">

    <label for="diagnostico" class="label">Diagnóstico:</label>
    <input type="text" id="diagnostico" [(ngModel)]="nuevaFichaClinica.diagnostico" name="diagnostico" class="input-text">

    <label for="categoria" class="label">Categoría:</label>
    <select id="categoria" [(ngModel)]="nuevaFichaClinica.categoria" name="categoria" class="select">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [ngValue]="categoria" class="option">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>

    <button type="submit" id="addClinicalRecordButton" class="button">Agregar Ficha Clínica</button>
  </form>
</div>

<!-- Agregar Ficha Clínica sin reserva-->
<div class="clinical-record-form">
  <h2 class="section-title">Sin reserva</h2>
  <form (submit)="agregarFichaClinica()">
    <label for="doctor" class="label">Doctor:</label>
    <select id="doctor" [(ngModel)]="nuevaFichaClinica.doctor" name="doctor" class="select">
      <option value="">Selecciona un Doctor</option>
      <ng-container *ngFor="let persona of personas">
        <ng-container *ngIf="persona.flag_es_doctor">
          <option [ngValue]="persona" class="option">{{ persona.nombre + ' ' + persona.apellido }}</option>
        </ng-container>
      </ng-container>
    </select>

    <label for="paciente" class="label">Paciente:</label>
    <select id="paciente" [(ngModel)]="nuevaFichaClinica.paciente" name="paciente" class="select">
      <option value="">Selecciona un Paciente</option>
      <ng-container *ngFor="let persona of personas">
        <ng-container *ngIf="!persona.flag_es_doctor">
          <option [ngValue]="persona" class="option">{{ persona.nombre + ' ' + persona.apellido }}</option>
        </ng-container>
      </ng-container>
    </select>

    <label for="motivoConsulta" class="label">Motivo de Consulta:</label>
    <input type="text" id="motivoConsulta" [(ngModel)]="nuevaFichaClinica.motivoConsulta" name="motivoConsulta" class="input-text">

    <label for="diagnostico" class="label">Diagnóstico:</label>
    <input type="text" id="diagnostico" [(ngModel)]="nuevaFichaClinica.diagnostico" name="diagnostico" class="input-text">

    <label for="categoria" class="label">Categoría:</label>
    <select id="categoria" [(ngModel)]="nuevaFichaClinica.categoria" name="categoria" class="select">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [ngValue]="categoria" class="option">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>

    <label for="reservanueva_date" class="label">Fecha:</label>
    <input type="date" id="reservanueva_date" [(ngModel)]="nuevaFichaClinica.fecha" name="date" class="input-date">

    <button type="submit" id="addClinicalRecordButton" class="button">Agregar Ficha Clínica</button>
  </form>
</div>

<!-- Filtros -->
<div class="filters">
  <h2 style="color: grey;">Filtros</h2>
  <div class="form-group">
    <label for="doctorFilter" class="label">Doctor:</label>
    <input type="text" id="doctorFilter" [(ngModel)]="filtros.doctor" (input)="applyFilters()" class="input-text">
  </div>

  <div class="form-group">
    <label for="pacienteFilter" class="label">Paciente:</label>
    <input type="text" id="pacienteFilter" [(ngModel)]="filtros.paciente" (input)="applyFilters()" class="input-text">
  </div>

  <div class="form-group">
    <label for="fechaDesdeFilter" class="label">Fecha desde:</label>
    <input type="date" id="fechaDesdeFilter" [(ngModel)]="filtros.fechaDesde" (input)="applyFilters()" class="input-date">
  </div>

  <div class="form-group">
    <label for="fechaHastaFilter" class="label">Fecha hasta:</label>
    <input type="date" id="fechaHastaFilter" [(ngModel)]="filtros.fechaHasta" (input)="applyFilters()" class="input-date">
  </div>

  <div class="form-group">
    <label for="categoriaFilter" class="label">Categoria:</label>
    <select id="categoriaFilter" [(ngModel)]="filtros.categoria" (change)="applyFilters()" class="select">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [value]="categoria.id" class="option">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>
  </div>
</div>

<!-- botones para descargar el excel y el PDF -->
<button (click)="exportExcel()" class="download-button">Descargar Excel de las fichas filtradas</button>
<button (click)="exportPDF()" class="download-button">Descargar PDF de las fichas filtradas</button>

<div class="clinical-record-form">
<!-- Lista de Fichas Clínicas -->
<div id="Exportar" class="clinical-records-table">
  <h2 class="section-title">Fichas Clínicas</h2>
  <table class="table">
    <thead>
      <tr>
        <th>Doctor</th>
        <th>Paciente</th>
        <th>Fecha</th>
        <th>Motivo de Consulta</th>
        <th>Diagnóstico</th>
        <th>Categoría</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let fichaClinica of fichasClinicasFiltradas; let i = index">
        <td>{{ fichaClinica.doctor.nombre }} {{fichaClinica.doctor.apellido}}</td>
        <td>{{ fichaClinica.paciente.nombre }} {{fichaClinica.paciente.apellido}}</td>
        <td>{{ fichaClinica.fecha | date: "dd/MM/yyyy"}}</td>
        <td>{{ fichaClinica.motivoConsulta }}</td>
        <td>{{ fichaClinica.diagnostico }}</td>
        <td>{{ fichaClinica.categoria.descripcion }}</td>
      </tr>
    </tbody>
  </table>
</div>
</div>
</div>


--------------------------------------------------------------------------------
File: ficha-clinica.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\ficha-clinica\ficha-clinica.component.ts
Content:
import { Component, OnInit } from '@angular/core';
import { FichaClinicaService } from './ficha-clinica.service';
import { FichaClinica } from './ficha-clinica.interface';
import { FichaClinicaFiltro } from './ficha-clinica-filtro.interface';
import { Categoria } from '../consulta/consulta.interface';
import { ReservaDeTurno } from '../reserva-de-turnos/reserva-de-turnos.interface';
import { ReservaService } from '../reserva-de-turnos/Reserva.service';
import { ConsultaService } from '../consulta/consulta.service';
import { RegistroPersona_interface as Persona } from '../registro-de-personas/registro-de-personas.interface';
import { RegistroPersonaService } from '../registro-de-personas/registro-de-personas.service';
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { sort } from 'ramda';

@Component({
  selector: 'app-ficha-clinica',
  templateUrl: './ficha-clinica.component.html',
  styleUrls: ['./ficha-clinica.component.css']
})
export class FichaClinicaComponent implements OnInit {
  fichasClinicasFiltradas: FichaClinica[] = [];
  fechaFiltroReserva: Date = new Date(0);
  reservasDeTurno: ReservaDeTurno[] = [];
  categorias: Categoria[] = [];
  personas: Persona[] = [];
  filtros: FichaClinicaFiltro = {
    doctor: '',
    paciente: '',
    fechaDesde: '',
    fechaHasta: '',
    categoria: 0,
  };
  personaVacia: Persona = {
    idPersona: 0,
    nombre: '',
    apellido: '',
    telefono: '',
    email: '',
    cedula: '',
    flag_es_doctor: false,
    isEditing: false
  };
  nuevaFichaClinica: FichaClinica = {
    id: 0,
    paciente: this.personaVacia,
    doctor: this.personaVacia,
    motivoConsulta: '',
    diagnostico: '',
    fecha: new Date(0),
    reserva: {
      id: 0,
      doctor: this.personaVacia,
      paciente: this.personaVacia,
      fecha: new Date(0),
      hora: '',
      categoria: { isEditing: false, id: 0, descripcion: '' },
    },
    categoria: { isEditing: false, id: 0, descripcion: '' },
  };
  
  constructor(
    private fichaClinicaService: FichaClinicaService,
    private categoriaService: ConsultaService,
    private reservaService: ReservaService,
    private personaService: RegistroPersonaService) {}

  ngOnInit(): void {
    this.initFichas();
    this.initReservas();
    this.loadCategorias();
    this.loadPersonas();
  }

  // Carga las reservas del día actual
  initFichas(): void {
    this.filtros.fechaDesde = this.fichaClinicaService.formattedDate(new Date());
    this.filtros.fechaHasta = this.fichaClinicaService.formattedDate(new Date());

    // Llama al servicio para cargar las reservas con los filtros
    this.applyFilters();
  }

  initReservas(): void {
    this.loadReservas();
  }

  applyFilters(): void {
    this.fichaClinicaService.getFichasClinicas(this.filtros).subscribe((fichasClinicas) => {
      this.fichasClinicasFiltradas = fichasClinicas;
    });
  }

  loadCategorias(): void {
    this.categoriaService.getCategorias().subscribe((categorias) => {
      // Aquí puedes acceder a la lista de categorias
      this.categorias = categorias;
    });
  }

  //agarra todas las reservas del componente reserva de turno component
  loadReservas(): void {
    this.reservaService.getAllReservas().subscribe((reservas) => {
      //ordenar por fecha
      reservas.sort((a, b) => new Date(a.fecha).getTime() - new Date(b.fecha).getTime());
      // Aquí puedes acceder a la lista de categorias
      this.reservasDeTurno = reservas;
    });
  }

  loadPersonas(): void {
    this.personaService.getPersonas().subscribe((persona) => {
      this.personas = persona
    })
  }


  //generar el XLSX
  exportExcel(): void {
    const data = this.fichasClinicasFiltradas.map(fichaClinica => ({
      Doctor: fichaClinica.doctor.nombre + ' ' + fichaClinica.doctor.apellido,
      Paciente: fichaClinica.paciente.nombre + ' ' + fichaClinica.paciente.apellido,
      Fecha: this.fichaClinicaService.formattedDate(fichaClinica.fecha),
      'Motivo de Consulta': fichaClinica.motivoConsulta,
      Diagnóstico: fichaClinica.diagnostico,
      Categoría: fichaClinica.categoria.descripcion,
    }));
  
    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data);
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'FichasClinicas');
  
    XLSX.writeFile(wb, 'fichas_clinicas.xlsx');
  }

  //generar pdf
  public exportPDF(): void {
    let DATA: any = document.getElementById('Exportar');
    html2canvas(DATA).then((canvas: { height: number; width: number; toDataURL: (arg0: string) => any; }) => {
      let fileWidth = 208;
      let fileHeight = (canvas.height * fileWidth) / canvas.width;
      const FILEURI = canvas.toDataURL('image/png');
      let PDF = new jsPDF('p', 'mm', 'a4');
      let position = 0;
      PDF.addImage(FILEURI, 'PNG', 0, position, fileWidth, fileHeight);
      PDF.save('fichas_clinicas.pdf');
    });
  }

  agregarFichaClinicaConReserva(): void {
    let fichaClinica: FichaClinica = {
      id: 0,
      paciente: this.nuevaFichaClinica.reserva.paciente,
      doctor: this.nuevaFichaClinica.reserva.doctor,
      motivoConsulta: this.nuevaFichaClinica.motivoConsulta,
      diagnostico: this.nuevaFichaClinica.diagnostico,
      fecha: this.nuevaFichaClinica.reserva.fecha,
      reserva: this.nuevaFichaClinica.reserva,
      categoria: this.nuevaFichaClinica.categoria
    };

    this.fichaClinicaService.addFichaClinica(fichaClinica).subscribe(() => {
      // Reload the reservations with filters applied
      this.applyFilters();
    });

    fichaClinica = this.nuevaFichaClinica;
  }

  agregarFichaClinica(): void {
    let fichaClinica: FichaClinica = {
      id: 0,
      paciente: this.nuevaFichaClinica.paciente,
      doctor: this.nuevaFichaClinica.doctor,
      motivoConsulta: this.nuevaFichaClinica.motivoConsulta,
      diagnostico: this.nuevaFichaClinica.diagnostico,
      fecha: new Date(this.nuevaFichaClinica.fecha + 'T00:00:00'),
      reserva: this.nuevaFichaClinica.reserva,
      categoria: this.nuevaFichaClinica.categoria
    };

    this.fichaClinicaService.addFichaClinica(fichaClinica).subscribe(() => {
      // Reload the reservations with filters applied
      this.applyFilters();
    });

    fichaClinica = this.nuevaFichaClinica;
  }
}


--------------------------------------------------------------------------------
File: ficha-clinica.interface.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\ficha-clinica\ficha-clinica.interface.ts
Content:
import { Categoria } from "../consulta/consulta.interface";
import { ReservaDeTurno } from "../reserva-de-turnos/reserva-de-turnos.interface";
import { RegistroPersona_interface as Persona } from "../registro-de-personas/registro-de-personas.interface";

export interface FichaClinica {
    id: number;
    paciente: Persona;
    doctor: Persona;
    motivoConsulta: string;
    diagnostico: string;
    fecha: Date,
    reserva: ReservaDeTurno;
    categoria: Categoria;
}

--------------------------------------------------------------------------------
File: ficha-clinica.service.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\ficha-clinica\ficha-clinica.service.ts
Content:
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { FichaClinica } from './ficha-clinica.interface'; // Import the FichaClinica interface
import { FichaClinicaFiltro } from './ficha-clinica-filtro.interface';
import { Data_fichasClinicas } from 'src/assets/data/fichaClinica/data_fichaClinica';

@Injectable({
  providedIn: 'root'
})
export class FichaClinicaService {
  fichasClinicas: FichaClinica[]

  constructor() {
    this.fichasClinicas = Data_fichasClinicas;
  }

  formattedDate(date: Date){
    let dd = String(date.getDate()).padStart(2, '0');
    let mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0
    let yyyy = date.getFullYear();
    return yyyy + '/' + mm + '/' + dd;
  }

  // Get a list of fichas clínicas based on filters
  getFichasClinicas(filtros: FichaClinicaFiltro): Observable<FichaClinica[]> {
    // Simulate filtering based on filters if needed
    let filteredFichasClinicas = this.fichasClinicas;

    if (filtros.doctor) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
        ficha.doctor.nombre.toLowerCase().concat(' ',ficha.doctor.apellido.toLowerCase()).includes(filtros.doctor.toLowerCase())
      );
    }
    if (filtros.paciente) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
      ficha.paciente.nombre.toLowerCase().concat(' ',ficha.paciente.apellido.toLowerCase()).includes(filtros.paciente.toLowerCase())
      );
    }
    if (filtros.fechaDesde) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
        ficha.fecha >= new Date(filtros.fechaDesde.replace(/-/g, '/'))
      );
    }
    if (filtros.fechaHasta) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
        ficha.fecha <= new Date(filtros.fechaHasta.replace(/-/g, '/'))
      );
    }
    if (filtros.categoria) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
        ficha.categoria.id === +filtros.categoria
      );
    }

    return of(filteredFichasClinicas);
  }

  // Add a new ficha clínica
  addFichaClinica(fichaClinica: FichaClinica): Observable<FichaClinica[]> {
    // Generate a unique ID for the new ficha clínica
    fichaClinica.id = this.generateNewId();

    // Push the new ficha clínica to the array
    this.fichasClinicas.push(fichaClinica);

    return of(this.fichasClinicas);
  }

  // Generate a unique ID for a new ficha clínica (you may need to implement this logic)
  generateNewId(): number {
    // Find the maximum ID in the current data
    const maxId = Math.max(...this.fichasClinicas.map((f) => f.id));

    // Generate a new ID by incrementing the maximum ID
    return maxId + 1;
  }
}


--------------------------------------------------------------------------------
File: ficha-clinica.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\ficha-clinica\ficha-clinica.txt
Content:
ficha-clinica-filtro.interface.ts
import { Categoria } from "../consulta/consulta.interface";

export interface FichaClinicaFiltro {
    doctor: string; // Nombre del doctor
    paciente: string; // Nombre del paciente
    fechaDesde: string; // Fecha de la reserva
    fechaHasta: string; // Horario de la reserva (por ejemplo, "09:00 - 10:00")
    categoria: number;
  }
  

ficha-clinica.component.css
/* Estilos generales para la página */
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}

.container {
  min-width: 850px;
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Estilos para filtros y formulario de reserva */
.filters, .clinical-record-form {
  margin-top: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  flex-wrap: wrap;
}

.filter-item, .form-item {
  margin-bottom: 15px;
}

/* Estilos para botones */
button {
  padding: 5px 10px;
  margin-right: 5px;
  margin-top: 5px;
  border-radius: 3px;
  cursor: pointer;
  background-color: #007bff;
  color: #fff;
  border: none;
}

/* Estilos para tablas */
table {
  width: 100%;
  border-collapse: collapse;
  padding: 10px;
}

th, td {
  padding: 10px;
  text-align: center;
  border: 0px solid #ddd;
}

th {
  background-color: #f0f0f0;
  font-weight: bold;
}

/* Estilos para selects */
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para etiquetas y campos de entrada */
label {
  font-weight: bold;
}

input[type="text"],
input[type="date"],
input[type="email"],
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para botones específicos */
button.btn-info {
  background-color: #17a2b8;
}

button.btn-success {
  background-color: #28a745;
}

button.btn-danger {
  background-color: #dc3545;
}


ficha-clinica.component.html
<!---->
<!-- Filtros --1>
<div class="filters">
  <h2>Filter Options</h2>
  <label for="doctorFilter">Doctor:</label>
  <input type="text" id="doctorFilter" [(ngModel)]="filtros.doctor" (input)="applyFilters()">

  <label for="pacienteFilter">Paciente:</label>
  <input type="text" id="pacienteFilter" [(ngModel)]="filtros.paciente" (input)="applyFilters()">

  <label for="fechaDesdeFilter">Fecha desde:</label>
  <input type="date" id="fechaDesdeFilter" [(ngModel)]="filtros.fechaDesde" (input)="applyFilters()">

  <label for="fechaHastaFilter">Fecha hasta:</label>
  <input type="date" id="fechaHastaFilter" [(ngModel)]="filtros.fechaHasta" (input)="applyFilters()">

  <label for="categoriaFilter">Categoria:</label>
  <select id="categoriaFilter" [(ngModel)]="filtros.categoria" (change)="applyFilters()">
    <option value="">Selecciona una categoría</option>
    <ng-container *ngFor="let categoria of categorias">
      <option [value]="categoria.id">{{ categoria.descripcion }}</option>
    </ng-container>
  </select>
</div>

<!-- Agregar Ficha Clínica con reserva--1>
<div class="clinical-record-form">
  <h2>Agregar Ficha Clínica con Reserva</h2>
  <form (submit)="agregarFichaClinicaConReserva()">
    <label for="reserva">Reserva:</label>
    <select id="reserva" [(ngModel)]="nuevaFichaClinica.reserva" name="reserva">
      <option value="">Selecciona una reserva</option>
      <ng-container *ngFor="let reserva of reservasDeTurno">
        <option [ngValue]="reserva">{{ reserva.doctor.nombre }} {{ reserva.doctor.apellido }} - {{ reserva.paciente.nombre }} {{ reserva.paciente.apellido }} - {{ reserva.fecha | date: "dd/MM/yyyy" }} - {{ reserva.hora }}</option>
      </ng-container>
    </select>

    <label for="motivoConsulta">Motivo de Consulta:</label>
    <input type="text" id="motivoConsulta" [(ngModel)]="nuevaFichaClinica.motivoConsulta" name="motivoConsulta">

    <label for="diagnostico">Diagnóstico:</label>
    <input type="text" id="diagnostico" [(ngModel)]="nuevaFichaClinica.diagnostico" name="diagnostico">

    <label for="categoria">Categoría:</label>
    <select id="categoria" [(ngModel)]="nuevaFichaClinica.categoria" name="categoria">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [ngValue]="categoria">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>

    <button type="submit" id="addClinicalRecordButton">Agregar Ficha Clínica</button>
  </form>
</div>

<!-- Agregar Ficha Clínica sin reserva--1>
<div class="clinical-record-form-2">
  <h2>Agregar Ficha Clínica sin Reserva</h2>
  <form (submit)="agregarFichaClinica()">
    <label for="Doctor">Doctor:</label>
    <select id="doctor" [(ngModel)]="nuevaFichaClinica.doctor" name="doctor">
      <option value="">Selecciona un Doctor</option>
      <ng-container *ngFor="let persona of personas">
        <ng-container *ngIf="persona.flag_es_doctor">
          <option [ngValue]="persona">{{ persona.nombre + ' ' + persona.apellido }}</option>
        </ng-container>
      </ng-container>
    </select>

    <label for="Paciente">Paciente:</label>
    <select id="paciente" [(ngModel)]="nuevaFichaClinica.paciente" name="paciente">
      <option value="">Selecciona un Paciente</option>
      <ng-container *ngFor="let persona of personas">
        <ng-container *ngIf="!persona.flag_es_doctor">
          <option [ngValue]="persona">{{ persona.nombre + ' ' + persona.apellido }}</option>
        </ng-container>
      </ng-container>
    </select>

    <label for="motivoConsulta">Motivo de Consulta:</label>
    <input type="text" id="motivoConsulta" [(ngModel)]="nuevaFichaClinica.motivoConsulta" name="motivoConsulta">

    <label for="diagnostico">Diagnóstico:</label>
    <input type="text" id="diagnostico" [(ngModel)]="nuevaFichaClinica.diagnostico" name="diagnostico">

    <label for="categoria">Categoría:</label>
    <select id="categoria" [(ngModel)]="nuevaFichaClinica.categoria" name="categoria">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [ngValue]="categoria">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>

    <label for="date">Fecha:</label>
      <input type="date" id="reservanueva_date" [(ngModel)]="nuevaFichaClinica.fecha" name="date">

    <button type="submit" id="addClinicalRecordButton">Agregar Ficha Clínica</button>
  </form>
</div>

<!-- boton para descargar el excel de las fichas filtradas  --1>
<button (click)="exportExcel()">Descargar Excel de las fichas filtradas</button>

<!-- boton para descargar el PDF de las fichas filtradas  --1>
<button (click)="exportPDF()">Descargar PDF de las fichas filtradas</button>

<!-- Lista de Fichas Clínicas --1>
<div id="Exportar">
<h2>Tabla de Fichas Clínicas</h2>
<table>
  <thead>
    <tr>
      <th>Doctor</th>
      <th>Paciente</th>
      <th>Fecha</th>
      <th>Motivo de Consulta</th>
      <th>Diagnóstico</th>
      <th>Categoría</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let fichaClinica of fichasClinicasFiltradas; let i = index">
      <td>{{ fichaClinica.doctor.nombre }} {{fichaClinica.doctor.apellido}}</td>
      <td>{{ fichaClinica.paciente.nombre }} {{fichaClinica.paciente.apellido}}</td>
      <td>{{ fichaClinica.fecha | date: "dd/MM/yyyy"}}</td>
      <td>{{ fichaClinica.motivoConsulta }}</td>
      <td>{{ fichaClinica.diagnostico }}</td>
      <td>{{ fichaClinica.categoria.descripcion }}</td>
    </tr>
  </tbody>
</table>
</div>
-->

<div class="container">
  <h2 class="section-title">Ficha Clínica de Pacientes</h2>
<!-- Agregar Ficha Clínica con reserva-->
<div class="clinical-record-form">
  <h2 class="section-title">Con reserva</h2>
  <form (submit)="agregarFichaClinicaConReserva()">
    <label for="reserva" class="label">Reserva:</label>
    <select id="reserva" [(ngModel)]="nuevaFichaClinica.reserva" name="reserva" class="select">
      <option value="">Selecciona una reserva</option>
      <ng-container *ngFor="let reserva of reservasDeTurno">
        <option [ngValue]="reserva" class="option">
          {{ reserva.doctor.nombre }} {{ reserva.doctor.apellido }} - {{ reserva.paciente.nombre }} {{ reserva.paciente.apellido }} - {{ reserva.fecha | date: "dd/MM/yyyy" }} - {{ reserva.hora }}
        </option>
      </ng-container>
    </select>

    <label for="motivoConsulta" class="label">Motivo de Consulta:</label>
    <input type="text" id="motivoConsulta" [(ngModel)]="nuevaFichaClinica.motivoConsulta" name="motivoConsulta" class="input-text">

    <label for="diagnostico" class="label">Diagnóstico:</label>
    <input type="text" id="diagnostico" [(ngModel)]="nuevaFichaClinica.diagnostico" name="diagnostico" class="input-text">

    <label for="categoria" class="label">Categoría:</label>
    <select id="categoria" [(ngModel)]="nuevaFichaClinica.categoria" name="categoria" class="select">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [ngValue]="categoria" class="option">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>

    <button type="submit" id="addClinicalRecordButton" class="button">Agregar Ficha Clínica</button>
  </form>
</div>

<!-- Agregar Ficha Clínica sin reserva-->
<div class="clinical-record-form">
  <h2 class="section-title">Sin reserva</h2>
  <form (submit)="agregarFichaClinica()">
    <label for="doctor" class="label">Doctor:</label>
    <select id="doctor" [(ngModel)]="nuevaFichaClinica.doctor" name="doctor" class="select">
      <option value="">Selecciona un Doctor</option>
      <ng-container *ngFor="let persona of personas">
        <ng-container *ngIf="persona.flag_es_doctor">
          <option [ngValue]="persona" class="option">{{ persona.nombre + ' ' + persona.apellido }}</option>
        </ng-container>
      </ng-container>
    </select>

    <label for="paciente" class="label">Paciente:</label>
    <select id="paciente" [(ngModel)]="nuevaFichaClinica.paciente" name="paciente" class="select">
      <option value="">Selecciona un Paciente</option>
      <ng-container *ngFor="let persona of personas">
        <ng-container *ngIf="!persona.flag_es_doctor">
          <option [ngValue]="persona" class="option">{{ persona.nombre + ' ' + persona.apellido }}</option>
        </ng-container>
      </ng-container>
    </select>

    <label for="motivoConsulta" class="label">Motivo de Consulta:</label>
    <input type="text" id="motivoConsulta" [(ngModel)]="nuevaFichaClinica.motivoConsulta" name="motivoConsulta" class="input-text">

    <label for="diagnostico" class="label">Diagnóstico:</label>
    <input type="text" id="diagnostico" [(ngModel)]="nuevaFichaClinica.diagnostico" name="diagnostico" class="input-text">

    <label for="categoria" class="label">Categoría:</label>
    <select id="categoria" [(ngModel)]="nuevaFichaClinica.categoria" name="categoria" class="select">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [ngValue]="categoria" class="option">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>

    <label for="reservanueva_date" class="label">Fecha:</label>
    <input type="date" id="reservanueva_date" [(ngModel)]="nuevaFichaClinica.fecha" name="date" class="input-date">

    <button type="submit" id="addClinicalRecordButton" class="button">Agregar Ficha Clínica</button>
  </form>
</div>

<!-- Filtros -->
<div class="filters">
  <h2 style="color: grey;">Filtros</h2>
  <div class="form-group">
    <label for="doctorFilter" class="label">Doctor:</label>
    <input type="text" id="doctorFilter" [(ngModel)]="filtros.doctor" (input)="applyFilters()" class="input-text">
  </div>

  <div class="form-group">
    <label for="pacienteFilter" class="label">Paciente:</label>
    <input type="text" id="pacienteFilter" [(ngModel)]="filtros.paciente" (input)="applyFilters()" class="input-text">
  </div>

  <div class="form-group">
    <label for="fechaDesdeFilter" class="label">Fecha desde:</label>
    <input type="date" id="fechaDesdeFilter" [(ngModel)]="filtros.fechaDesde" (input)="applyFilters()" class="input-date">
  </div>

  <div class="form-group">
    <label for="fechaHastaFilter" class="label">Fecha hasta:</label>
    <input type="date" id="fechaHastaFilter" [(ngModel)]="filtros.fechaHasta" (input)="applyFilters()" class="input-date">
  </div>

  <div class="form-group">
    <label for="categoriaFilter" class="label">Categoria:</label>
    <select id="categoriaFilter" [(ngModel)]="filtros.categoria" (change)="applyFilters()" class="select">
      <option value="">Selecciona una categoría</option>
      <ng-container *ngFor="let categoria of categorias">
        <option [value]="categoria.id" class="option">{{ categoria.descripcion }}</option>
      </ng-container>
    </select>
  </div>
</div>

<!-- botones para descargar el excel y el PDF -->
<button (click)="exportExcel()" class="download-button">Descargar Excel de las fichas filtradas</button>
<button (click)="exportPDF()" class="download-button">Descargar PDF de las fichas filtradas</button>

<div class="clinical-record-form">
<!-- Lista de Fichas Clínicas -->
<div id="Exportar" class="clinical-records-table">
  <h2 class="section-title">Fichas Clínicas</h2>
  <table class="table">
    <thead>
      <tr>
        <th>Doctor</th>
        <th>Paciente</th>
        <th>Fecha</th>
        <th>Motivo de Consulta</th>
        <th>Diagnóstico</th>
        <th>Categoría</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let fichaClinica of fichasClinicasFiltradas; let i = index">
        <td>{{ fichaClinica.doctor.nombre }} {{fichaClinica.doctor.apellido}}</td>
        <td>{{ fichaClinica.paciente.nombre }} {{fichaClinica.paciente.apellido}}</td>
        <td>{{ fichaClinica.fecha | date: "dd/MM/yyyy"}}</td>
        <td>{{ fichaClinica.motivoConsulta }}</td>
        <td>{{ fichaClinica.diagnostico }}</td>
        <td>{{ fichaClinica.categoria.descripcion }}</td>
      </tr>
    </tbody>
  </table>
</div>
</div>
</div>


ficha-clinica.component.ts
import { Component, OnInit } from '@angular/core';
import { FichaClinicaService } from './ficha-clinica.service';
import { FichaClinica } from './ficha-clinica.interface';
import { FichaClinicaFiltro } from './ficha-clinica-filtro.interface';
import { Categoria } from '../consulta/consulta.interface';
import { ReservaDeTurno } from '../reserva-de-turnos/reserva-de-turnos.interface';
import { ReservaService } from '../reserva-de-turnos/Reserva.service';
import { ConsultaService } from '../consulta/consulta.service';
import { RegistroPersona_interface as Persona } from '../registro-de-personas/registro-de-personas.interface';
import { RegistroPersonaService } from '../registro-de-personas/registro-de-personas.service';
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { sort } from 'ramda';

@Component({
  selector: 'app-ficha-clinica',
  templateUrl: './ficha-clinica.component.html',
  styleUrls: ['./ficha-clinica.component.css']
})
export class FichaClinicaComponent implements OnInit {
  fichasClinicasFiltradas: FichaClinica[] = [];
  fechaFiltroReserva: Date = new Date(0);
  reservasDeTurno: ReservaDeTurno[] = [];
  categorias: Categoria[] = [];
  personas: Persona[] = [];
  filtros: FichaClinicaFiltro = {
    doctor: '',
    paciente: '',
    fechaDesde: '',
    fechaHasta: '',
    categoria: 0,
  };
  personaVacia: Persona = {
    idPersona: 0,
    nombre: '',
    apellido: '',
    telefono: '',
    email: '',
    cedula: '',
    flag_es_doctor: false,
    isEditing: false
  };
  nuevaFichaClinica: FichaClinica = {
    id: 0,
    paciente: this.personaVacia,
    doctor: this.personaVacia,
    motivoConsulta: '',
    diagnostico: '',
    fecha: new Date(0),
    reserva: {
      id: 0,
      doctor: this.personaVacia,
      paciente: this.personaVacia,
      fecha: new Date(0),
      hora: '',
      categoria: { isEditing: false, id: 0, descripcion: '' },
    },
    categoria: { isEditing: false, id: 0, descripcion: '' },
  };
  
  constructor(
    private fichaClinicaService: FichaClinicaService,
    private categoriaService: ConsultaService,
    private reservaService: ReservaService,
    private personaService: RegistroPersonaService) {}

  ngOnInit(): void {
    this.initFichas();
    this.initReservas();
    this.loadCategorias();
    this.loadPersonas();
  }

  // Carga las reservas del día actual
  initFichas(): void {
    this.filtros.fechaDesde = this.fichaClinicaService.formattedDate(new Date());
    this.filtros.fechaHasta = this.fichaClinicaService.formattedDate(new Date());

    // Llama al servicio para cargar las reservas con los filtros
    this.applyFilters();
  }

  initReservas(): void {
    this.loadReservas();
  }

  applyFilters(): void {
    this.fichaClinicaService.getFichasClinicas(this.filtros).subscribe((fichasClinicas) => {
      this.fichasClinicasFiltradas = fichasClinicas;
    });
  }

  loadCategorias(): void {
    this.categoriaService.getCategorias().subscribe((categorias) => {
      // Aquí puedes acceder a la lista de categorias
      this.categorias = categorias;
    });
  }

  //agarra todas las reservas del componente reserva de turno component
  loadReservas(): void {
    this.reservaService.getAllReservas().subscribe((reservas) => {
      //ordenar por fecha
      reservas.sort((a, b) => new Date(a.fecha).getTime() - new Date(b.fecha).getTime());
      // Aquí puedes acceder a la lista de categorias
      this.reservasDeTurno = reservas;
    });
  }

  loadPersonas(): void {
    this.personaService.getPersonas().subscribe((persona) => {
      this.personas = persona
    })
  }


  //generar el XLSX
  exportExcel(): void {
    const data = this.fichasClinicasFiltradas.map(fichaClinica => ({
      Doctor: fichaClinica.doctor.nombre + ' ' + fichaClinica.doctor.apellido,
      Paciente: fichaClinica.paciente.nombre + ' ' + fichaClinica.paciente.apellido,
      Fecha: this.fichaClinicaService.formattedDate(fichaClinica.fecha),
      'Motivo de Consulta': fichaClinica.motivoConsulta,
      Diagnóstico: fichaClinica.diagnostico,
      Categoría: fichaClinica.categoria.descripcion,
    }));
  
    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data);
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'FichasClinicas');
  
    XLSX.writeFile(wb, 'fichas_clinicas.xlsx');
  }

  //generar pdf
  public exportPDF(): void {
    let DATA: any = document.getElementById('Exportar');
    html2canvas(DATA).then((canvas: { height: number; width: number; toDataURL: (arg0: string) => any; }) => {
      let fileWidth = 208;
      let fileHeight = (canvas.height * fileWidth) / canvas.width;
      const FILEURI = canvas.toDataURL('image/png');
      let PDF = new jsPDF('p', 'mm', 'a4');
      let position = 0;
      PDF.addImage(FILEURI, 'PNG', 0, position, fileWidth, fileHeight);
      PDF.save('fichas_clinicas.pdf');
    });
  }

  agregarFichaClinicaConReserva(): void {
    let fichaClinica: FichaClinica = {
      id: 0,
      paciente: this.nuevaFichaClinica.reserva.paciente,
      doctor: this.nuevaFichaClinica.reserva.doctor,
      motivoConsulta: this.nuevaFichaClinica.motivoConsulta,
      diagnostico: this.nuevaFichaClinica.diagnostico,
      fecha: this.nuevaFichaClinica.reserva.fecha,
      reserva: this.nuevaFichaClinica.reserva,
      categoria: this.nuevaFichaClinica.categoria
    };

    this.fichaClinicaService.addFichaClinica(fichaClinica).subscribe(() => {
      // Reload the reservations with filters applied
      this.applyFilters();
    });

    fichaClinica = this.nuevaFichaClinica;
  }

  agregarFichaClinica(): void {
    let fichaClinica: FichaClinica = {
      id: 0,
      paciente: this.nuevaFichaClinica.paciente,
      doctor: this.nuevaFichaClinica.doctor,
      motivoConsulta: this.nuevaFichaClinica.motivoConsulta,
      diagnostico: this.nuevaFichaClinica.diagnostico,
      fecha: new Date(this.nuevaFichaClinica.fecha + 'T00:00:00'),
      reserva: this.nuevaFichaClinica.reserva,
      categoria: this.nuevaFichaClinica.categoria
    };

    this.fichaClinicaService.addFichaClinica(fichaClinica).subscribe(() => {
      // Reload the reservations with filters applied
      this.applyFilters();
    });

    fichaClinica = this.nuevaFichaClinica;
  }
}


ficha-clinica.interface.ts
import { Categoria } from "../consulta/consulta.interface";
import { ReservaDeTurno } from "../reserva-de-turnos/reserva-de-turnos.interface";
import { RegistroPersona_interface as Persona } from "../registro-de-personas/registro-de-personas.interface";

export interface FichaClinica {
    id: number;
    paciente: Persona;
    doctor: Persona;
    motivoConsulta: string;
    diagnostico: string;
    fecha: Date,
    reserva: ReservaDeTurno;
    categoria: Categoria;
}

ficha-clinica.service.ts
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { FichaClinica } from './ficha-clinica.interface'; // Import the FichaClinica interface
import { FichaClinicaFiltro } from './ficha-clinica-filtro.interface';
import { Data_fichasClinicas } from 'src/assets/data/fichaClinica/data_fichaClinica';

@Injectable({
  providedIn: 'root'
})
export class FichaClinicaService {
  fichasClinicas: FichaClinica[]

  constructor() {
    this.fichasClinicas = Data_fichasClinicas;
  }

  formattedDate(date: Date){
    let dd = String(date.getDate()).padStart(2, '0');
    let mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0
    let yyyy = date.getFullYear();
    return yyyy + '/' + mm + '/' + dd;
  }

  // Get a list of fichas clínicas based on filters
  getFichasClinicas(filtros: FichaClinicaFiltro): Observable<FichaClinica[]> {
    // Simulate filtering based on filters if needed
    let filteredFichasClinicas = this.fichasClinicas;

    if (filtros.doctor) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
        ficha.doctor.nombre.toLowerCase().concat(' ',ficha.doctor.apellido.toLowerCase()).includes(filtros.doctor.toLowerCase())
      );
    }
    if (filtros.paciente) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
      ficha.paciente.nombre.toLowerCase().concat(' ',ficha.paciente.apellido.toLowerCase()).includes(filtros.paciente.toLowerCase())
      );
    }
    if (filtros.fechaDesde) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
        ficha.fecha >= new Date(filtros.fechaDesde.replace(/-/g, '/'))
      );
    }
    if (filtros.fechaHasta) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
        ficha.fecha <= new Date(filtros.fechaHasta.replace(/-/g, '/'))
      );
    }
    if (filtros.categoria) {
      filteredFichasClinicas = filteredFichasClinicas.filter((ficha) =>
        ficha.categoria.id === +filtros.categoria
      );
    }

    return of(filteredFichasClinicas);
  }

  // Add a new ficha clínica
  addFichaClinica(fichaClinica: FichaClinica): Observable<FichaClinica[]> {
    // Generate a unique ID for the new ficha clínica
    fichaClinica.id = this.generateNewId();

    // Push the new ficha clínica to the array
    this.fichasClinicas.push(fichaClinica);

    return of(this.fichasClinicas);
  }

  // Generate a unique ID for a new ficha clínica (you may need to implement this logic)
  generateNewId(): number {
    // Find the maximum ID in the current data
    const maxId = Math.max(...this.fichasClinicas.map((f) => f.id));

    // Generate a new ID by incrementing the maximum ID
    return maxId + 1;
  }
}




--------------------------------------------------------------------------------
File: home.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\home\home.component.css
Content:
.titulo{
  margin-left: 1.5rem;
}

/* Estilo para el contenedor de las cartas */
.card-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 20px;
  padding : 15px;
}

/* Estilo para cada carta */
.card {
  width: 20rem; /* Ajusta el ancho según tus preferencias */
  background-color: #ffffff; /* Fondo blanco para la tarjeta */
  border: 1px solid #263238; /* Borde del mismo color que el sidebar */
  border-radius: 8px; /* Bordes redondeados */
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); /* Sombra suave */
  height: auto;
  cursor: pointer;

  .card-body{
    padding: 3px;
    align-items: center;
  }
  .card-head{
    padding: 10px;
    display: flex;
    justify-content: center; /* Centra horizontalmente */

  }
}

/* Estilo para los iconos */
.card i {
  font-size: 2rem; /* Ajusta el tamaño del icono según tus preferencias */
  margin-right: 10px; /* Espacio a la derecha del icono */
  color: #263238; /* Color del icono */
}

/* Estilo para el título */
.card h5 {
  color: #263238; /* Color del título */
}

/* Estilo para la descripción */
.card p {
  color: #a3abc0ff; /* Color de la descripción */
}

.card-link{
  display: flex;
  align-items: center;
  height: 3rem;
  color: #f3f3f3;
  text-decoration: none;
  border-radius: 0.625rem;
  transition: all .3s ease;
}

/* Estilo para el contenedor */
.container {
  margin-right: auto;
  margin-left: auto;
  padding-left: 15px;
  padding-right: 15px;
}

/* Estilo para la fila */
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -15px;
  margin-left: -15px;
}

/* Estilo para las columnas */
.col {
  position: relative;
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  align-items: center;
}

/* Estilo para forzar un salto de línea (100% de ancho) */
.w-100 {
  width: 100%;
}


--------------------------------------------------------------------------------
File: home.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\home\home.component.html
Content:
<div class="card-gral">
  <div class="card-gral-head">
    <h1 class="titulo"> {{bienvenida}} </h1>
  </div>
  <div class="card-container">
    <div class="card" *ngFor="let item of cardList,let i = index" [routerLink]="item.routelink">
      <!-- Inicio de la lista de cartas -->
      <div class="card-body">
        <div class="card-head">
          <i class="{{item.icon}} "></i>
        </div>
        <h5 class="card-title">{{item.title}}</h5>
        <p class="card-text">{{item.description}}</p>
        <!-- No es necesario el botón "Ver más" -->
      </div>
      <!-- Fin de la lista de cartas -->
      <div class="w-100" *ngIf="(i + 1) % 3 === 0"></div>
    </div>
  </div>
</div>



--------------------------------------------------------------------------------
File: home.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\home\home.component.ts
Content:
import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl:'./home.component.html',
  styleUrls: ['./home.component.css']
})

export class HomeComponent {
  bienvenida = 'Bienvenido. Que desea realizar?';

  cardList: any[] = [
    {
      icon: 'fal fa-tags',
      title: 'Categoria de Consultas',
      description: 'Se puede agregar, modificar o eliminar la categoria de las consultas.',
      routelink: 'consultas',
    },
    {
      icon: 'fal fa-file',
      title: 'Registro De Personas',
      description: 'Accede al registro de personas donde se puede crear un nuevo persona o modificar uno ya existente, Tambien se le asigna si es doctor o paciente.',
      routelink: 'registro-de-personas',
    },
    {
      icon: 'fal fa-pen-nib',
      title: 'Reserva de Turnos',
      description: 'Accede a la reserva de turnos para agregar o modificar un turno, tambien se puede indicar a que hora se tendra el turno.',
      routelink: 'reserva-de-turnos',
    },
    {
      icon: 'fal fa-list',
      title: 'Ficha Clinica',
      description: 'Accede a la ficha clinica para agregar o modificar la ficha, tambien se puede hacer un reporte en excel o pdf.',
      routelink: 'ficha-clinica',
    }
    // Agrega más objetos de carta según sea necesario
  ];

  constructor() { }

  ngOnInit(): void {
  }
}


--------------------------------------------------------------------------------
File: home.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\home\home.txt
Content:
home.component.css
.titulo{
  margin-left: 1.5rem;
}

/* Estilo para el contenedor de las cartas */
.card-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 20px;
  padding : 15px;
}

/* Estilo para cada carta */
.card {
  width: 20rem; /* Ajusta el ancho según tus preferencias */
  background-color: #ffffff; /* Fondo blanco para la tarjeta */
  border: 1px solid #263238; /* Borde del mismo color que el sidebar */
  border-radius: 8px; /* Bordes redondeados */
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); /* Sombra suave */
  height: auto;
  cursor: pointer;

  .card-body{
    padding: 3px;
    align-items: center;
  }
  .card-head{
    padding: 10px;
    display: flex;
    justify-content: center; /* Centra horizontalmente */

  }
}

/* Estilo para los iconos */
.card i {
  font-size: 2rem; /* Ajusta el tamaño del icono según tus preferencias */
  margin-right: 10px; /* Espacio a la derecha del icono */
  color: #263238; /* Color del icono */
}

/* Estilo para el título */
.card h5 {
  color: #263238; /* Color del título */
}

/* Estilo para la descripción */
.card p {
  color: #a3abc0ff; /* Color de la descripción */
}

.card-link{
  display: flex;
  align-items: center;
  height: 3rem;
  color: #f3f3f3;
  text-decoration: none;
  border-radius: 0.625rem;
  transition: all .3s ease;
}

/* Estilo para el contenedor */
.container {
  margin-right: auto;
  margin-left: auto;
  padding-left: 15px;
  padding-right: 15px;
}

/* Estilo para la fila */
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -15px;
  margin-left: -15px;
}

/* Estilo para las columnas */
.col {
  position: relative;
  width: 100%;
  padding-right: 15px;
  padding-left: 15px;
  align-items: center;
}

/* Estilo para forzar un salto de línea (100% de ancho) */
.w-100 {
  width: 100%;
}


home.component.html
<div class="card-gral">
  <div class="card-gral-head">
    <h1 class="titulo"> {{bienvenida}} </h1>
  </div>
  <div class="card-container">
    <div class="card" *ngFor="let item of cardList,let i = index" [routerLink]="item.routelink">
      <!-- Inicio de la lista de cartas -->
      <div class="card-body">
        <div class="card-head">
          <i class="{{item.icon}} "></i>
        </div>
        <h5 class="card-title">{{item.title}}</h5>
        <p class="card-text">{{item.description}}</p>
        <!-- No es necesario el botón "Ver más" -->
      </div>
      <!-- Fin de la lista de cartas -->
      <div class="w-100" *ngIf="(i + 1) % 3 === 0"></div>
    </div>
  </div>
</div>



home.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl:'./home.component.html',
  styleUrls: ['./home.component.css']
})

export class HomeComponent {
  bienvenida = 'Bienvenido. Que desea realizar?';

  cardList: any[] = [
    {
      icon: 'fal fa-tags',
      title: 'Categoria de Consultas',
      description: 'Se puede agregar, modificar o eliminar la categoria de las consultas.',
      routelink: 'consultas',
    },
    {
      icon: 'fal fa-file',
      title: 'Registro De Personas',
      description: 'Accede al registro de personas donde se puede crear un nuevo persona o modificar uno ya existente, Tambien se le asigna si es doctor o paciente.',
      routelink: 'registro-de-personas',
    },
    {
      icon: 'fal fa-pen-nib',
      title: 'Reserva de Turnos',
      description: 'Accede a la reserva de turnos para agregar o modificar un turno, tambien se puede indicar a que hora se tendra el turno.',
      routelink: 'reserva-de-turnos',
    },
    {
      icon: 'fal fa-list',
      title: 'Ficha Clinica',
      description: 'Accede a la ficha clinica para agregar o modificar la ficha, tambien se puede hacer un reporte en excel o pdf.',
      routelink: 'ficha-clinica',
    }
    // Agrega más objetos de carta según sea necesario
  ];

  constructor() { }

  ngOnInit(): void {
  }
}




--------------------------------------------------------------------------------
File: registro-de-personas.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\registro-de-personas\registro-de-personas.component.css
Content:
/* Estilos generales para la página */
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}

.container {
  min-width: 850px;
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Estilos para filtros y formulario de reserva */
.filters, .reservation-form {
  margin-top: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  flex-wrap: wrap;
}

.filter-item, .form-item {
  margin-bottom: 15px;
}

/* Estilos para botones */
button {
  padding: 5px 10px;
  margin-right: 5px;
  border-radius: 3px;
  cursor: pointer;
  background-color: #007bff;
  color: #fff;
  border: none;
}

/* Estilos para tablas */
table {
  width: 100%;
  border-collapse: collapse;
  padding: 10px;
}

th, td {
  padding: 10px;
  text-align: center;
  border: 0px solid #ddd;
}

th {
  background-color: #f0f0f0;
  font-weight: bold;
}

/* Estilos para selects */
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para etiquetas y campos de entrada */
label {
  font-weight: bold;
}

input[type="text"],
input[type="date"],
input[type="email"],
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para botones específicos */
button.btn-info {
  background-color: #17a2b8;
}

button.btn-success {
  background-color: #28a745;
}

button.btn-danger {
  background-color: #dc3545;
}


--------------------------------------------------------------------------------
File: registro-de-personas.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\registro-de-personas\registro-de-personas.component.html
Content:
<!--
<!-- registro-de-personas/registro-de-personas.component.html --1>
<div>
  <!-- Filter section --1>
  <div>
    <h2>Filter Options</h2>
    <label for="nombreFilter">Nombre:</label>
    <input type="text" id="nombreFilter" [(ngModel)]="nombreFilter" (input)="applyFilters()">

    <label for="apellidoFilter">Apellido:</label>
    <input type="text" id="apellidoFilter" [(ngModel)]="apellidoFilter" (input)="applyFilters()">

    <label for="tipoFilter">Tipo:</label>
    <select id="tipoFilter" [(ngModel)]="filtroTipo" (change)="applyFilters()">
      <option value="todos">Todos</option>
      <option value="pacientes">Pacientes</option>
      <option value="doctores">Doctores</option>
    </select>
  </div>

  <!-- Add Persona form --1>
  <div>
    <h2>Add Persona</h2>
    <form (submit)="addPersona()">
      <!-- Input fields for persona details --1>
      <label for="nombre">Nombre:</label>
      <input type="text" id="nombre" name="nombre" [(ngModel)]="newPersona.nombre" required>

      <label for="apellido">Apellido:</label>
      <input type="text" id="apellido" name="apellido" [(ngModel)]="newPersona.apellido" required>

      <label for="telefono">Teléfono:</label>
      <input type="text" id="telefono" name="telefono" [(ngModel)]="newPersona.telefono" required>

      <label for="email">Email:</label>
      <input type="email" id="email" name="email" [(ngModel)]="newPersona.email" required>

      <label for="cedula">Cédula:</label>
      <input type="text" id="cedula" name="cedula" [(ngModel)]="newPersona.cedula" required>

      <label for="flag_es_doctor">Es Doctor?</label>
      <input type="checkbox" id="flag_es_doctor" name="flag_es_doctor" [(ngModel)]="newPersona.flag_es_doctor">

      <button type="submit">Add</button>
     </form>
  </div>

<!-- Table to display personas --1>
<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Nombre</th>
      <th>Apellido</th>
      <th>Teléfono</th>
      <th>Email</th>
      <th>Cédula</th>
      <th>Estatus</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let persona of filteredPersonas; let i = index">
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.idPersona }}</span>
        <input *ngIf="persona.isEditing" type="number" [(ngModel)]="persona.idPersona">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.nombre }}</span>
        <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.nombre">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.apellido }}</span>
        <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.apellido">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.telefono }}</span>
        <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.telefono">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.email }}</span>
        <input *ngIf="persona.isEditing" type="email" [(ngModel)]="persona.email">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.cedula }}</span>
        <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.cedula">
      </td>
      <td>
        <span *ngIf="!persona.isEditing && persona.flag_es_doctor">Doctor</span>
        <span *ngIf="!persona.isEditing && !persona.flag_es_doctor">Paciente</span>
        <input *ngIf="persona.isEditing" type="checkbox" [(ngModel)]="persona.flag_es_doctor">
      </td>
      <td>
        <button *ngIf="!persona.isEditing" (click)="editPersona(persona)">Edit</button>
        <button *ngIf="persona.isEditing" (click)="updatePersona(persona, i)">Update</button>
        <button (click)="deletePersona(persona.idPersona)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>
</div>
-->



<div class="container">
    <!-- Add Persona form -->
    <h2>Registro de Personas</h2>
    <div class="reservation-form">
      <form (submit)="addPersona()">
        <!-- Input fields for persona details -->
        <div class="form-group">
          <label for="nombre">Nombre:</label>
          <input type="text" id="nombre" name="nombre" [(ngModel)]="newPersona.nombre" required>
        </div>

        <div class="form-group">
          <label for="apellido">Apellido:</label>
          <input type="text" id="apellido" name="apellido" [(ngModel)]="newPersona.apellido" required>
        </div>

        <div class="form-group">
          <label for="telefono">Teléfono:</label>
          <input type="text" id="telefono" name="telefono" [(ngModel)]="newPersona.telefono" required>
        </div>

        <div class="form-group">
          <label for="email">Email:</label>
          <input  type="email" id="email" name="email" [(ngModel)]="newPersona.email" required>
        </div>

        <div class="form-group">
          <label for="cedula">Cédula:</label>
          <input type="text" id="cedula" name="cedula" [(ngModel)]="newPersona.cedula" required>
        </div>

        <div class="form-group">
          <label for="flag_es_doctor">Es Doctor?</label>
          <input  type="checkbox" id="flag_es_doctor" name="flag_es_doctor"
                  style = "margin-left: 5px;"
                  [(ngModel)]="newPersona.flag_es_doctor">
        </div>

        <button type="submit">Agregar Persona</button>
       </form>
    </div>

  <!-- Filter section -->
  <div class="filters">
    <h2 style="color: gray;">Filtros</h2>
    <label for="nombreFilter">Nombre:</label>
    <input type="text" id="nombreFilter" [(ngModel)]="nombreFilter" (input)="applyFilters()">

    <label for="apellidoFilter">Apellido:</label>
    <input type="text" id="apellidoFilter" [(ngModel)]="apellidoFilter" (input)="applyFilters()">

    <label for="tipoFilter">Tipo:</label>
    <select id="tipoFilter" [(ngModel)]="filtroTipo" (change)="applyFilters()">
      <option value="todos">Todos</option>
      <option value="pacientes">Pacientes</option>
      <option value="doctores">Doctores</option>
    </select>
  </div>

  <!-- Table to display personas -->
  <div class="reservation-form">
    <h2>Personas</h2>
    <table class="registro-table">
      <thead>
        <tr>
          <!--<th>ID</th>-->
          <th>Nombre</th>
          <th>Apellido</th>
          <th>Teléfono</th>
          <th>Email</th>
          <th>Cédula</th>
          <th>Dr.?</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let persona of filteredPersonas; let i = index">
          <!--<td>
            <span *ngIf="!persona.isEditing">{{ persona.idPersona }}</span>
            <input *ngIf="persona.isEditing" type="number" [(ngModel)]="persona.idPersona">
          </td>-->
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.nombre }}</span>
            <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.nombre">
          </td>
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.apellido }}</span>
            <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.apellido">
          </td>
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.telefono }}</span>
            <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.telefono">
          </td>
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.email }}</span>
            <input *ngIf="persona.isEditing" type="email" [(ngModel)]="persona.email">
          </td>
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.cedula }}</span>
            <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.cedula">
          </td>
          <td>
            <input *ngIf="!persona.isEditing && persona.flag_es_doctor" type="checkbox" [(ngModel)]="persona.flag_es_doctor" disabled>
            <input *ngIf="!persona.isEditing && !persona.flag_es_doctor" type="checkbox"[(ngModel)]="persona.flag_es_doctor" disabled>
            <input *ngIf="persona.isEditing" type="checkbox" [(ngModel)]="persona.flag_es_doctor">
          </td>
          <td>
            <button class="btn-info" *ngIf="!persona.isEditing" (click)="editPersona(persona)">Editar</button>
            <button class="btn-success" *ngIf="persona.isEditing" (click)="updatePersona(persona, i)">Modificar</button>
            <button class="btn-danger"(click)="deletePersona(persona.idPersona)">Eliminar</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


--------------------------------------------------------------------------------
File: registro-de-personas.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\registro-de-personas\registro-de-personas.component.ts
Content:
import { RegistroPersonaService } from 'src/app/components/registro-de-personas/registro-de-personas.service';
import { Component, OnInit } from '@angular/core';
import { RegistroPersona_interface as Persona } from './registro-de-personas.interface';

@Component({
  selector: 'app-registro-de-personas',
  templateUrl: './registro-de-personas.component.html',
  styleUrls: ['./registro-de-personas.component.css']
})
export class RegistroDePersonasComponent implements OnInit {
  nombreFilter: string = ''; // Declare the nombreFilter property
  apellidoFilter = '';
  filtroTipo = 'todos'; // Valor predeterminado para mostrar todos

  newPersona: Persona = {
    idPersona: 0,
    nombre: '',
    apellido: '',
    telefono: '',
    email: '',
    cedula: '',
    flag_es_doctor: false,
    isEditing: false
  };
  filteredPersonas: Persona[] = [];
  listaDePersonas: Persona[] = [];

  constructor(private personaService: RegistroPersonaService) {}

  ngOnInit(): void {
    this.loadPersonas();
  }

  applyFilters(): void {
    // Aplicar filtros en base a nombre, apellido y tipo
    this.filteredPersonas = this.listaDePersonas.filter((persona) => {
      const nombreMatches = persona.nombre.toLowerCase().includes(this.nombreFilter.toLowerCase());
      const apellidoMatches = persona.apellido.toLowerCase().includes(this.apellidoFilter.toLowerCase());

      if (this.filtroTipo === 'pacientes') {
        return !persona.flag_es_doctor && nombreMatches && apellidoMatches;
      } else if (this.filtroTipo === 'doctores') {
        return persona.flag_es_doctor && nombreMatches && apellidoMatches;
      } else {
        return nombreMatches && apellidoMatches;
      }
    });
  }


  loadPersonas(): void {
    this.personaService.getPersonas().subscribe((personas) => {
      this.listaDePersonas = personas;
    });
    this.applyFilters();
  }

  addPersona(): void {
    this.personaService.addPersona(this.newPersona).subscribe(() => {
      this.loadPersonas(); // Reload personas after adding
      this.newPersona = {
        idPersona: 0,
        nombre: '',
        apellido: '',
        telefono: '',
        email: '',
        cedula: '',
        flag_es_doctor: false,
        isEditing: false
      };
    });
  }

  editPersona(persona: Persona): void {
    persona.isEditing = true;
  }

  updatePersona(persona: Persona, index: number): void {
    this.personaService.updatePersona(persona).subscribe(() => {
      persona.isEditing = false;
      this.loadPersonas(); // Reload personas after updating
    });
  }

  deletePersona(idPersona: number): void {
    this.personaService.deletePersona(idPersona).subscribe(() => {
      this.loadPersonas(); // Reload personas after deleting
    });
  }
}


--------------------------------------------------------------------------------
File: registro-de-personas.interface.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\registro-de-personas\registro-de-personas.interface.ts
Content:
export interface RegistroPersona_interface {
  idPersona: number;
  nombre: string;
  apellido: string;
  telefono: string;
  email: string;
  cedula: string;
  flag_es_doctor: boolean;
  isEditing: boolean;
}


--------------------------------------------------------------------------------
File: registro-de-personas.service.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\registro-de-personas\registro-de-personas.service.ts
Content:
import { RegistroPersona_interface as Persona } from 'src/app/components/registro-de-personas/registro-de-personas.interface';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Data_RegistroDePersonas } from '../../../assets/data/RegistroDePersonas/RegistroDePersonas';

@Injectable({
  providedIn: 'root'
})
export class RegistroPersonaService {
  private personas: Persona[]


  constructor() {
    this.personas = Data_RegistroDePersonas;
  }

  // Read operation: Get the list of personas
  getPersonas(): Observable<Persona[]> {
    // You can return the list of personas directly or fetch from an API if needed
    return new Observable<Persona[]>((observer) => {
      observer.next(this.personas);
      observer.complete();
    });
  }

  // Create operation: Add a new persona
  addPersona(persona: Persona): Observable<void> {

    // Genera un ID nuevo y lo asigna a la persona
    persona.idPersona = this.generateNewId();

    // Push the new persona to the data source
    this.personas.push(persona);

    // You can save the updated data source to a file or an API if needed

    return new Observable<void>((observer) => {
      observer.next();
      observer.complete();
    });
  }

  // Update operation: Update an existing persona
  updatePersona(persona: Persona): Observable<void> {
    const index = this.personas.findIndex((p) => p.idPersona === persona.idPersona);

    if (index !== -1) {
      // Replace the existing persona with the updated one
      this.personas[index] = persona;

      // You can save the updated data source to a file or an API if needed
    }

    return new Observable<void>((observer) => {
      observer.next();
      observer.complete();
    });
  }

  // Delete operation: Remove a persona by ID
  deletePersona(idPersona: number): Observable<void> {
    const index = this.personas.findIndex((p) => p.idPersona === idPersona);

    if (index !== -1) {
      // If the persona is found, remove it from the array
      this.personas.splice(index, 1);

      // You can save the updated data source to a file or an API if needed
    }

    return new Observable<void>((observer) => {
      observer.next();
      observer.complete();
    });
  }

  // Generate a new unique ID (You may implement your own logic)
  private generateNewId(): number {
    // Find the maximum ID in the current data
    const maxId = Math.max(...this.personas.map((p) => p.idPersona));

    // Generate a new ID by incrementing the maximum ID
    return maxId + 1;
  }
}


--------------------------------------------------------------------------------
File: registro-de-personas.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\registro-de-personas\registro-de-personas.txt
Content:
registro-de-personas.component.css
/* Estilos generales para la página */
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}

.container {
  min-width: 850px;
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Estilos para filtros y formulario de reserva */
.filters, .reservation-form {
  margin-top: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  flex-wrap: wrap;
}

.filter-item, .form-item {
  margin-bottom: 15px;
}

/* Estilos para botones */
button {
  padding: 5px 10px;
  margin-right: 5px;
  border-radius: 3px;
  cursor: pointer;
  background-color: #007bff;
  color: #fff;
  border: none;
}

/* Estilos para tablas */
table {
  width: 100%;
  border-collapse: collapse;
  padding: 10px;
}

th, td {
  padding: 10px;
  text-align: center;
  border: 0px solid #ddd;
}

th {
  background-color: #f0f0f0;
  font-weight: bold;
}

/* Estilos para selects */
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para etiquetas y campos de entrada */
label {
  font-weight: bold;
}

input[type="text"],
input[type="date"],
input[type="email"],
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para botones específicos */
button.btn-info {
  background-color: #17a2b8;
}

button.btn-success {
  background-color: #28a745;
}

button.btn-danger {
  background-color: #dc3545;
}


registro-de-personas.component.html
<!--
<!-- registro-de-personas/registro-de-personas.component.html --1>
<div>
  <!-- Filter section --1>
  <div>
    <h2>Filter Options</h2>
    <label for="nombreFilter">Nombre:</label>
    <input type="text" id="nombreFilter" [(ngModel)]="nombreFilter" (input)="applyFilters()">

    <label for="apellidoFilter">Apellido:</label>
    <input type="text" id="apellidoFilter" [(ngModel)]="apellidoFilter" (input)="applyFilters()">

    <label for="tipoFilter">Tipo:</label>
    <select id="tipoFilter" [(ngModel)]="filtroTipo" (change)="applyFilters()">
      <option value="todos">Todos</option>
      <option value="pacientes">Pacientes</option>
      <option value="doctores">Doctores</option>
    </select>
  </div>

  <!-- Add Persona form --1>
  <div>
    <h2>Add Persona</h2>
    <form (submit)="addPersona()">
      <!-- Input fields for persona details --1>
      <label for="nombre">Nombre:</label>
      <input type="text" id="nombre" name="nombre" [(ngModel)]="newPersona.nombre" required>

      <label for="apellido">Apellido:</label>
      <input type="text" id="apellido" name="apellido" [(ngModel)]="newPersona.apellido" required>

      <label for="telefono">Teléfono:</label>
      <input type="text" id="telefono" name="telefono" [(ngModel)]="newPersona.telefono" required>

      <label for="email">Email:</label>
      <input type="email" id="email" name="email" [(ngModel)]="newPersona.email" required>

      <label for="cedula">Cédula:</label>
      <input type="text" id="cedula" name="cedula" [(ngModel)]="newPersona.cedula" required>

      <label for="flag_es_doctor">Es Doctor?</label>
      <input type="checkbox" id="flag_es_doctor" name="flag_es_doctor" [(ngModel)]="newPersona.flag_es_doctor">

      <button type="submit">Add</button>
     </form>
  </div>

<!-- Table to display personas --1>
<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Nombre</th>
      <th>Apellido</th>
      <th>Teléfono</th>
      <th>Email</th>
      <th>Cédula</th>
      <th>Estatus</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let persona of filteredPersonas; let i = index">
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.idPersona }}</span>
        <input *ngIf="persona.isEditing" type="number" [(ngModel)]="persona.idPersona">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.nombre }}</span>
        <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.nombre">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.apellido }}</span>
        <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.apellido">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.telefono }}</span>
        <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.telefono">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.email }}</span>
        <input *ngIf="persona.isEditing" type="email" [(ngModel)]="persona.email">
      </td>
      <td>
        <span *ngIf="!persona.isEditing">{{ persona.cedula }}</span>
        <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.cedula">
      </td>
      <td>
        <span *ngIf="!persona.isEditing && persona.flag_es_doctor">Doctor</span>
        <span *ngIf="!persona.isEditing && !persona.flag_es_doctor">Paciente</span>
        <input *ngIf="persona.isEditing" type="checkbox" [(ngModel)]="persona.flag_es_doctor">
      </td>
      <td>
        <button *ngIf="!persona.isEditing" (click)="editPersona(persona)">Edit</button>
        <button *ngIf="persona.isEditing" (click)="updatePersona(persona, i)">Update</button>
        <button (click)="deletePersona(persona.idPersona)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>
</div>
-->



<div class="container">
    <!-- Add Persona form -->
    <h2>Registro de Personas</h2>
    <div class="reservation-form">
      <form (submit)="addPersona()">
        <!-- Input fields for persona details -->
        <div class="form-group">
          <label for="nombre">Nombre:</label>
          <input type="text" id="nombre" name="nombre" [(ngModel)]="newPersona.nombre" required>
        </div>

        <div class="form-group">
          <label for="apellido">Apellido:</label>
          <input type="text" id="apellido" name="apellido" [(ngModel)]="newPersona.apellido" required>
        </div>

        <div class="form-group">
          <label for="telefono">Teléfono:</label>
          <input type="text" id="telefono" name="telefono" [(ngModel)]="newPersona.telefono" required>
        </div>

        <div class="form-group">
          <label for="email">Email:</label>
          <input  type="email" id="email" name="email" [(ngModel)]="newPersona.email" required>
        </div>

        <div class="form-group">
          <label for="cedula">Cédula:</label>
          <input type="text" id="cedula" name="cedula" [(ngModel)]="newPersona.cedula" required>
        </div>

        <div class="form-group">
          <label for="flag_es_doctor">Es Doctor?</label>
          <input  type="checkbox" id="flag_es_doctor" name="flag_es_doctor"
                  style = "margin-left: 5px;"
                  [(ngModel)]="newPersona.flag_es_doctor">
        </div>

        <button type="submit">Agregar Persona</button>
       </form>
    </div>

  <!-- Filter section -->
  <div class="filters">
    <h2 style="color: gray;">Filtros</h2>
    <label for="nombreFilter">Nombre:</label>
    <input type="text" id="nombreFilter" [(ngModel)]="nombreFilter" (input)="applyFilters()">

    <label for="apellidoFilter">Apellido:</label>
    <input type="text" id="apellidoFilter" [(ngModel)]="apellidoFilter" (input)="applyFilters()">

    <label for="tipoFilter">Tipo:</label>
    <select id="tipoFilter" [(ngModel)]="filtroTipo" (change)="applyFilters()">
      <option value="todos">Todos</option>
      <option value="pacientes">Pacientes</option>
      <option value="doctores">Doctores</option>
    </select>
  </div>

  <!-- Table to display personas -->
  <div class="reservation-form">
    <h2>Personas</h2>
    <table class="registro-table">
      <thead>
        <tr>
          <!--<th>ID</th>-->
          <th>Nombre</th>
          <th>Apellido</th>
          <th>Teléfono</th>
          <th>Email</th>
          <th>Cédula</th>
          <th>Dr.?</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let persona of filteredPersonas; let i = index">
          <!--<td>
            <span *ngIf="!persona.isEditing">{{ persona.idPersona }}</span>
            <input *ngIf="persona.isEditing" type="number" [(ngModel)]="persona.idPersona">
          </td>-->
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.nombre }}</span>
            <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.nombre">
          </td>
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.apellido }}</span>
            <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.apellido">
          </td>
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.telefono }}</span>
            <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.telefono">
          </td>
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.email }}</span>
            <input *ngIf="persona.isEditing" type="email" [(ngModel)]="persona.email">
          </td>
          <td>
            <span *ngIf="!persona.isEditing">{{ persona.cedula }}</span>
            <input *ngIf="persona.isEditing" type="text" [(ngModel)]="persona.cedula">
          </td>
          <td>
            <input *ngIf="!persona.isEditing && persona.flag_es_doctor" type="checkbox" [(ngModel)]="persona.flag_es_doctor" disabled>
            <input *ngIf="!persona.isEditing && !persona.flag_es_doctor" type="checkbox"[(ngModel)]="persona.flag_es_doctor" disabled>
            <input *ngIf="persona.isEditing" type="checkbox" [(ngModel)]="persona.flag_es_doctor">
          </td>
          <td>
            <button class="btn-info" *ngIf="!persona.isEditing" (click)="editPersona(persona)">Editar</button>
            <button class="btn-success" *ngIf="persona.isEditing" (click)="updatePersona(persona, i)">Modificar</button>
            <button class="btn-danger"(click)="deletePersona(persona.idPersona)">Eliminar</button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


registro-de-personas.component.ts
import { RegistroPersonaService } from 'src/app/components/registro-de-personas/registro-de-personas.service';
import { Component, OnInit } from '@angular/core';
import { RegistroPersona_interface as Persona } from './registro-de-personas.interface';

@Component({
  selector: 'app-registro-de-personas',
  templateUrl: './registro-de-personas.component.html',
  styleUrls: ['./registro-de-personas.component.css']
})
export class RegistroDePersonasComponent implements OnInit {
  nombreFilter: string = ''; // Declare the nombreFilter property
  apellidoFilter = '';
  filtroTipo = 'todos'; // Valor predeterminado para mostrar todos

  newPersona: Persona = {
    idPersona: 0,
    nombre: '',
    apellido: '',
    telefono: '',
    email: '',
    cedula: '',
    flag_es_doctor: false,
    isEditing: false
  };
  filteredPersonas: Persona[] = [];
  listaDePersonas: Persona[] = [];

  constructor(private personaService: RegistroPersonaService) {}

  ngOnInit(): void {
    this.loadPersonas();
  }

  applyFilters(): void {
    // Aplicar filtros en base a nombre, apellido y tipo
    this.filteredPersonas = this.listaDePersonas.filter((persona) => {
      const nombreMatches = persona.nombre.toLowerCase().includes(this.nombreFilter.toLowerCase());
      const apellidoMatches = persona.apellido.toLowerCase().includes(this.apellidoFilter.toLowerCase());

      if (this.filtroTipo === 'pacientes') {
        return !persona.flag_es_doctor && nombreMatches && apellidoMatches;
      } else if (this.filtroTipo === 'doctores') {
        return persona.flag_es_doctor && nombreMatches && apellidoMatches;
      } else {
        return nombreMatches && apellidoMatches;
      }
    });
  }


  loadPersonas(): void {
    this.personaService.getPersonas().subscribe((personas) => {
      this.listaDePersonas = personas;
    });
    this.applyFilters();
  }

  addPersona(): void {
    this.personaService.addPersona(this.newPersona).subscribe(() => {
      this.loadPersonas(); // Reload personas after adding
      this.newPersona = {
        idPersona: 0,
        nombre: '',
        apellido: '',
        telefono: '',
        email: '',
        cedula: '',
        flag_es_doctor: false,
        isEditing: false
      };
    });
  }

  editPersona(persona: Persona): void {
    persona.isEditing = true;
  }

  updatePersona(persona: Persona, index: number): void {
    this.personaService.updatePersona(persona).subscribe(() => {
      persona.isEditing = false;
      this.loadPersonas(); // Reload personas after updating
    });
  }

  deletePersona(idPersona: number): void {
    this.personaService.deletePersona(idPersona).subscribe(() => {
      this.loadPersonas(); // Reload personas after deleting
    });
  }
}


registro-de-personas.interface.ts
export interface RegistroPersona_interface {
  idPersona: number;
  nombre: string;
  apellido: string;
  telefono: string;
  email: string;
  cedula: string;
  flag_es_doctor: boolean;
  isEditing: boolean;
}


registro-de-personas.service.ts
import { RegistroPersona_interface as Persona } from 'src/app/components/registro-de-personas/registro-de-personas.interface';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Data_RegistroDePersonas } from '../../../assets/data/RegistroDePersonas/RegistroDePersonas';

@Injectable({
  providedIn: 'root'
})
export class RegistroPersonaService {
  private personas: Persona[]


  constructor() {
    this.personas = Data_RegistroDePersonas;
  }

  // Read operation: Get the list of personas
  getPersonas(): Observable<Persona[]> {
    // You can return the list of personas directly or fetch from an API if needed
    return new Observable<Persona[]>((observer) => {
      observer.next(this.personas);
      observer.complete();
    });
  }

  // Create operation: Add a new persona
  addPersona(persona: Persona): Observable<void> {

    // Genera un ID nuevo y lo asigna a la persona
    persona.idPersona = this.generateNewId();

    // Push the new persona to the data source
    this.personas.push(persona);

    // You can save the updated data source to a file or an API if needed

    return new Observable<void>((observer) => {
      observer.next();
      observer.complete();
    });
  }

  // Update operation: Update an existing persona
  updatePersona(persona: Persona): Observable<void> {
    const index = this.personas.findIndex((p) => p.idPersona === persona.idPersona);

    if (index !== -1) {
      // Replace the existing persona with the updated one
      this.personas[index] = persona;

      // You can save the updated data source to a file or an API if needed
    }

    return new Observable<void>((observer) => {
      observer.next();
      observer.complete();
    });
  }

  // Delete operation: Remove a persona by ID
  deletePersona(idPersona: number): Observable<void> {
    const index = this.personas.findIndex((p) => p.idPersona === idPersona);

    if (index !== -1) {
      // If the persona is found, remove it from the array
      this.personas.splice(index, 1);

      // You can save the updated data source to a file or an API if needed
    }

    return new Observable<void>((observer) => {
      observer.next();
      observer.complete();
    });
  }

  // Generate a new unique ID (You may implement your own logic)
  private generateNewId(): number {
    // Find the maximum ID in the current data
    const maxId = Math.max(...this.personas.map((p) => p.idPersona));

    // Generate a new ID by incrementing the maximum ID
    return maxId + 1;
  }
}




--------------------------------------------------------------------------------
File: reserva-de-turnos-filtro.interface.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\reserva-de-turnos\reserva-de-turnos-filtro.interface.ts
Content:
export interface ReservaDeTurnoFiltro {
  doctor: string; // Nombre del doctor
  paciente: string; // Nombre del paciente
  fechaDesde: string; // Fecha de la reserva
  fechaHasta: string; // Horario de la reserva (por ejemplo, "09:00 - 10:00")
}


--------------------------------------------------------------------------------
File: reserva-de-turnos.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\reserva-de-turnos\reserva-de-turnos.component.css
Content:
/* Estilos generales para la página */
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Estilos para filtros y formulario de reserva */
.filters, .reservation-form {
  margin-top: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  flex-wrap: wrap;
}


.filter-item, .form-item {
  margin-bottom: 15px;
}

/* Estilos para botones */
button {
  padding: 5px 10px;
  margin-right: 5px;
  margin-top: 5px;
  border-radius: 3px;
  cursor: pointer;
  background-color: #007bff;
  color: #fff;
  border: none;
}

/* Estilos para tablas */
table {
  width: 100%;
  border-collapse: collapse;
  padding: 10px;
}

th, td {
  padding: 10px;
  text-align: center;
  border: 0px solid #ddd;
}

th {
  background-color: #f0f0f0;
  font-weight: bold;
}

/* Estilos para selects */
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para etiquetas y campos de entrada */
label {
  font-weight: bold;
}

input[type="text"],
input[type="date"],
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para botones específicos */
button.btn-info {
  background-color: #17a2b8;
}

button.btn-success {
  background-color: #28a745;
}

button.btn-danger {
  background-color: #dc3545;
}


--------------------------------------------------------------------------------
File: reserva-de-turnos.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\reserva-de-turnos\reserva-de-turnos.component.html
Content:

<div class="container">
<!-- Formulario de Reserva -->
  <h2>Reserva de Turno</h2>
  <div class="reservation-form">

    <form (submit)="reservarTurno()">
      <label for="doctor">Doctor:</label>
        <!-- <input type="text" id="reservanueva_docName" [(ngModel)]="nuevaReserva.doctor" name="doctor"> -->
        <!-- Marco -->
        <select id="reservanueva_docName" [(ngModel)]="nuevaReserva.doctor" name="doctor">
          <option value="" disabled selected>Selecciona un doctor</option>
          <!--<option unselectable value="">Selecciona un doctor</option>-->
          <ng-container *ngFor="let persona of personas">
            <ng-container *ngIf="persona.flag_es_doctor">
              <option [ngValue]="persona">{{ persona.nombre + ' ' + persona.apellido }}</option>
            </ng-container>
          </ng-container>
        </select>

      <label for="paciente">Pacientes:</label>
      <!-- <input type="text" id="reservanueva_pacientName" [(ngModel)]="nuevaReserva.paciente" name="pacient"> -->
      <!-- Lista desplegable de Pacientes -->

      <select id="reservanueva_pacientName" [(ngModel)]="nuevaReserva.paciente" name="paciente">
        <option value="" disabled selected>Selecciona un paciente</option>
        <!--<option value="">Selecciona un paciente</option> -->
        <ng-container *ngFor="let persona of personas">
          <ng-container *ngIf="!persona.flag_es_doctor">
            <option [ngValue]="persona">{{ persona.nombre + ' ' + persona.apellido }}</option>
          </ng-container>
        </ng-container>
      </select>
      <label for="date">Fecha:</label>
      <input type="date" id="reservanueva_date" [(ngModel)]="nuevaReserva.fecha" name="date">

      <label for="hora">Hora:</label>
      <select id="reservanueva_timeName" [(ngModel)]="nuevaReserva.hora" name="time">
        <option value="" disabled selected>Selecciona una hora</option>
        <!--<option unselectable value="">Selecciona una hora</option>-->
        <!-- Opciones para seleccionar la hora -->
        <option value="09:00 - 10:00">09:00 - 10:00</option>
        <option value="10:00 - 11:00">10:00 - 11:00</option>
        <option value="11:00 - 12:00">11:00 - 12:00</option>
        <option value="12:00 - 13:00">12:00 - 13:00</option>
        <option value="13:00 - 14:00">13:00 - 14:00</option>
        <option value="14:00 - 15:00">14:00 - 15:00</option>
        <option value="15:00 - 16:00">15:00 - 16:00</option>
        <option value="16:00 - 17:00">16:00 - 17:00</option>
        <option value="17:00 - 18:00">17:00 - 18:00</option>
        <option value="18:00 - 19:00">18:00 - 19:00</option>
        <option value="19:00 - 20:00">19:00 - 20:00</option>
        <option value="20:00 - 21:00">20:00 - 21:00</option>
        <!-- Otras opciones de horarios -->
      </select>

      <button type="submit" id="addReservationButton">Agregar Reserva</button>
    </form>
  </div>
  <!-- Filtros -->
  <div class="filters">
    <h2 style="color: gray;">Filtros</h2>
    <label for="doctorFilter">Doctor:</label>
    <input type="text" id="doctorFilter" [(ngModel)]="filtros.doctor" (input)="applyFilters()">

    <label for="pacienteFilter">Paciente:</label>
    <input type="text" id="pacienteFilter" [(ngModel)]="filtros.paciente" (input)="applyFilters()">
    <label for="dateDesdeFilter">Fecha desde:</label>
    <input type="date" id="dateDesdeFilter" [(ngModel)]="filtros.fechaDesde" (input)="applyFilters()">

    <label for="dateHastaFilter">Fecha hasta:</label>
    <input type="date" id="dateHastaFilter" [(ngModel)]="filtros.fechaHasta" (input)="applyFilters()">

    <!-- <button (click)="applyFilters()">Apply Filters</button> Add this button -->
  </div>
<!-- Tabla de turnos -->
<div class="reservation-form">
  <h2>Reservas</h2>
  <table>
    <thead>
      <tr>
        <th>Doctor</th>
        <th>Paciente</th>
        <th>Fecha</th>
        <th>Hora</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let reserva of reservasFormateadas; let i = index">
        <td>{{ reserva.doctor }}</td>
        <td>{{ reserva.paciente }}</td>
        <td>{{ reserva.fecha }}</td>
        <td>{{ reserva.hora }}</td>
        <td>
          <button class="btn-danger" (click)="cancelReserva(reserva.id)">Cancelar</button>
        </td>
      </tr>
    </tbody>
  </table>
  </div>
</div>


--------------------------------------------------------------------------------
File: reserva-de-turnos.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\reserva-de-turnos\reserva-de-turnos.component.ts
Content:
import { Component, OnInit } from '@angular/core';
import { ReservaService, ReservaDeTurnoFormateada } from './Reserva.service';
import { ReservaDeTurno } from './reserva-de-turnos.interface';
import { ReservaDeTurnoFiltro } from './reserva-de-turnos-filtro.interface';
import { RegistroPersonaService } from '../registro-de-personas/registro-de-personas.service';//para traer las personas desde registro-de-personas
import { ConsultaService } from '../consulta/consulta.service';// para traer las categorias desde el registro de consultas
import { Categoria } from '../consulta/consulta.interface';
import { RegistroPersona_interface as Persona } from '../registro-de-personas/registro-de-personas.interface';

@Component({
  selector: 'app-reserva-de-turnos',
  templateUrl: './reserva-de-turnos.component.html',
  styleUrls: ['./reserva-de-turnos.component.css']
})
export class ReservaDeTurnosComponent implements OnInit {
  reservasFormateadas: ReservaDeTurnoFormateada[] = []; // Arreglo para almacenar las reservas
  personas: Persona[] = [];                                 // Declaración de la propiedad personas
  categorias: Categoria[] = [];                        //Arreglo para almacenar las categorias
  filtros: ReservaDeTurnoFiltro = {
    doctor: '',
    paciente: '',
    fechaDesde: '',
    fechaHasta: ''
  };
  categoriaVacia: Categoria = {
    isEditing: false,
    id: 0,
    descripcion: '',
  }
  personaVacia: Persona = {
    idPersona: 0,
    nombre: '',
    apellido: '',
    telefono: '',
    email: '',
    cedula: '',
    flag_es_doctor: false,
    isEditing: false
  }
  nuevaReserva: ReservaDeTurno = {
    id: 0,
    doctor: this.personaVacia,
    paciente: this.personaVacia,
    fecha: new Date(0),
    hora: '',
    categoria: this.categoriaVacia
  };
  isEditing: boolean[] = []; // Array to track if each reservation is in editing mode

  //para usar la lista de personas y categorias
  constructor(
    private reservaService: ReservaService,
    private personaService: RegistroPersonaService,
    private consultaService: ConsultaService
    ) {}

  ngOnInit(): void {
    this.initReservas(); // Carga las reservas del día actual por defecto
    this.loadPersonas(); // Carga la lista de personas
    this.loadCategorias();//Carga la lista de categorias
  }

  //Cargar las personas(Doctores y pacientes)
  loadPersonas(): void {
    this.personaService.getPersonas().subscribe((personas) => {
      // Aquí puedes acceder a la lista de personas (doctores y pacientes)
      this.personas = personas;
    });
  }

    //Cargar las categorias
  loadCategorias(): void {
    this.consultaService.getCategorias().subscribe((categorias) => {
      // Aquí puedes acceder a la lista de categorias
      this.categorias = categorias;
    });
  }
  

  // Carga las reservas del día actual
  initReservas(): void {
    this.filtros.fechaDesde = this.reservaService.formattedDate(new Date());
    this.filtros.fechaHasta = this.reservaService.formattedDate(new Date());
    
    // Llama al servicio para cargar las reservas con los filtros
    this.applyFilters();
  }

  // Aplicar filtros y cargar las reservas
  applyFilters(): void {
    // Llama al servicio para cargar las reservas con los filtros
    this.reservaService.getReservas(this.filtros).subscribe((reservasFormateadas) => {
      this.reservasFormateadas = reservasFormateadas;
    
    });
  }

  reservarTurno(): void {
    // Check if the required fields are not empty
    if (this.nuevaReserva.fecha && this.nuevaReserva.hora) {
      // Buscar el Doctor seleccionado en la lista de personas
      let doctorSeleccionado = this.personas.find(persona => persona === this.nuevaReserva.doctor);
      // Buscar el Paciente seleccionado en la lista de personas
      let pacienteSeleccionado = this.personas.find(persona => persona === this.nuevaReserva.paciente);

        // Verificar si se encontraron el Doctor y el Paciente
        if (doctorSeleccionado && pacienteSeleccionado) {
          // Crear una nueva instancia de ReservaDeTurno
          const nuevaReserva: ReservaDeTurno = {
            id: 0,
            doctor: doctorSeleccionado,
            paciente: pacienteSeleccionado,
            fecha: new Date(this.nuevaReserva.fecha + 'T00:00:00'),
            hora: this.nuevaReserva.hora,
            categoria: this.nuevaReserva.categoria
          };

          // Call the service to add the new reservation
      this.reservaService.addReserva(nuevaReserva).subscribe(() => {
        // Reload the reservations with filters applied
        this.applyFilters();
      });
     
      }
     
    }
  }
  

  // Cancela una reserva
  cancelReserva(idReserva: number): void {
    // Llama al servicio para cancelar la reserva por su ID
    this.reservaService.cancelReserva(idReserva).subscribe(() => {
      // Actualiza la lista de reservas después de la cancelación
      this.applyFilters();
    });
  }

}


--------------------------------------------------------------------------------
File: reserva-de-turnos.interface.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\reserva-de-turnos\reserva-de-turnos.interface.ts
Content:
import { Categoria } from "../consulta/consulta.interface";
import { RegistroPersona_interface as Persona } from "../registro-de-personas/registro-de-personas.interface";

export interface ReservaDeTurno {
  id: number; // ID único de la reserva
  doctor: Persona; // Nombre del doctor
  paciente: Persona; // Nombre del paciente
  fecha: Date; // Fecha de la reserva
  hora: string; // Horario de la reserva (por ejemplo, "09:00 - 10:00")
  categoria:Categoria;//Descripcion de la categoria
}


--------------------------------------------------------------------------------
File: reserva-de-turnos.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\reserva-de-turnos\reserva-de-turnos.txt
Content:
reserva-de-turnos-filtro.interface.ts
export interface ReservaDeTurnoFiltro {
  doctor: string; // Nombre del doctor
  paciente: string; // Nombre del paciente
  fechaDesde: string; // Fecha de la reserva
  fechaHasta: string; // Horario de la reserva (por ejemplo, "09:00 - 10:00")
}


reserva-de-turnos.component.css
/* Estilos generales para la página */
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
  margin: 0;
  padding: 0;
}

.container {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

/* Estilos para filtros y formulario de reserva */
.filters, .reservation-form {
  margin-top: 20px;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  flex-wrap: wrap;
}


.filter-item, .form-item {
  margin-bottom: 15px;
}

/* Estilos para botones */
button {
  padding: 5px 10px;
  margin-right: 5px;
  margin-top: 5px;
  border-radius: 3px;
  cursor: pointer;
  background-color: #007bff;
  color: #fff;
  border: none;
}

/* Estilos para tablas */
table {
  width: 100%;
  border-collapse: collapse;
  padding: 10px;
}

th, td {
  padding: 10px;
  text-align: center;
  border: 0px solid #ddd;
}

th {
  background-color: #f0f0f0;
  font-weight: bold;
}

/* Estilos para selects */
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para etiquetas y campos de entrada */
label {
  font-weight: bold;
}

input[type="text"],
input[type="date"],
select {
  width: 100%;
  padding: 5px;
  border-radius: 3px;
  border: 1px solid #ccc;
}

/* Estilos para botones específicos */
button.btn-info {
  background-color: #17a2b8;
}

button.btn-success {
  background-color: #28a745;
}

button.btn-danger {
  background-color: #dc3545;
}


reserva-de-turnos.component.html

<div class="container">
<!-- Formulario de Reserva -->
  <h2>Reserva de Turno</h2>
  <div class="reservation-form">

    <form (submit)="reservarTurno()">
      <label for="doctor">Doctor:</label>
        <!-- <input type="text" id="reservanueva_docName" [(ngModel)]="nuevaReserva.doctor" name="doctor"> -->
        <!-- Marco -->
        <select id="reservanueva_docName" [(ngModel)]="nuevaReserva.doctor" name="doctor">
          <option value="" disabled selected>Selecciona un doctor</option>
          <!--<option unselectable value="">Selecciona un doctor</option>-->
          <ng-container *ngFor="let persona of personas">
            <ng-container *ngIf="persona.flag_es_doctor">
              <option [ngValue]="persona">{{ persona.nombre + ' ' + persona.apellido }}</option>
            </ng-container>
          </ng-container>
        </select>

      <label for="paciente">Pacientes:</label>
      <!-- <input type="text" id="reservanueva_pacientName" [(ngModel)]="nuevaReserva.paciente" name="pacient"> -->
      <!-- Lista desplegable de Pacientes -->

      <select id="reservanueva_pacientName" [(ngModel)]="nuevaReserva.paciente" name="paciente">
        <option value="" disabled selected>Selecciona un paciente</option>
        <!--<option value="">Selecciona un paciente</option> -->
        <ng-container *ngFor="let persona of personas">
          <ng-container *ngIf="!persona.flag_es_doctor">
            <option [ngValue]="persona">{{ persona.nombre + ' ' + persona.apellido }}</option>
          </ng-container>
        </ng-container>
      </select>
      <label for="date">Fecha:</label>
      <input type="date" id="reservanueva_date" [(ngModel)]="nuevaReserva.fecha" name="date">

      <label for="hora">Hora:</label>
      <select id="reservanueva_timeName" [(ngModel)]="nuevaReserva.hora" name="time">
        <option value="" disabled selected>Selecciona una hora</option>
        <!--<option unselectable value="">Selecciona una hora</option>-->
        <!-- Opciones para seleccionar la hora -->
        <option value="09:00 - 10:00">09:00 - 10:00</option>
        <option value="10:00 - 11:00">10:00 - 11:00</option>
        <option value="11:00 - 12:00">11:00 - 12:00</option>
        <option value="12:00 - 13:00">12:00 - 13:00</option>
        <option value="13:00 - 14:00">13:00 - 14:00</option>
        <option value="14:00 - 15:00">14:00 - 15:00</option>
        <option value="15:00 - 16:00">15:00 - 16:00</option>
        <option value="16:00 - 17:00">16:00 - 17:00</option>
        <option value="17:00 - 18:00">17:00 - 18:00</option>
        <option value="18:00 - 19:00">18:00 - 19:00</option>
        <option value="19:00 - 20:00">19:00 - 20:00</option>
        <option value="20:00 - 21:00">20:00 - 21:00</option>
        <!-- Otras opciones de horarios -->
      </select>

      <button type="submit" id="addReservationButton">Agregar Reserva</button>
    </form>
  </div>
  <!-- Filtros -->
  <div class="filters">
    <h2 style="color: gray;">Filtros</h2>
    <label for="doctorFilter">Doctor:</label>
    <input type="text" id="doctorFilter" [(ngModel)]="filtros.doctor" (input)="applyFilters()">

    <label for="pacienteFilter">Paciente:</label>
    <input type="text" id="pacienteFilter" [(ngModel)]="filtros.paciente" (input)="applyFilters()">
    <label for="dateDesdeFilter">Fecha desde:</label>
    <input type="date" id="dateDesdeFilter" [(ngModel)]="filtros.fechaDesde" (input)="applyFilters()">

    <label for="dateHastaFilter">Fecha hasta:</label>
    <input type="date" id="dateHastaFilter" [(ngModel)]="filtros.fechaHasta" (input)="applyFilters()">

    <!-- <button (click)="applyFilters()">Apply Filters</button> Add this button -->
  </div>
<!-- Tabla de turnos -->
<div class="reservation-form">
  <h2>Reservas</h2>
  <table>
    <thead>
      <tr>
        <th>Doctor</th>
        <th>Paciente</th>
        <th>Fecha</th>
        <th>Hora</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let reserva of reservasFormateadas; let i = index">
        <td>{{ reserva.doctor }}</td>
        <td>{{ reserva.paciente }}</td>
        <td>{{ reserva.fecha }}</td>
        <td>{{ reserva.hora }}</td>
        <td>
          <button class="btn-danger" (click)="cancelReserva(reserva.id)">Cancelar</button>
        </td>
      </tr>
    </tbody>
  </table>
  </div>
</div>


reserva-de-turnos.component.ts
import { Component, OnInit } from '@angular/core';
import { ReservaService, ReservaDeTurnoFormateada } from './Reserva.service';
import { ReservaDeTurno } from './reserva-de-turnos.interface';
import { ReservaDeTurnoFiltro } from './reserva-de-turnos-filtro.interface';
import { RegistroPersonaService } from '../registro-de-personas/registro-de-personas.service';//para traer las personas desde registro-de-personas
import { ConsultaService } from '../consulta/consulta.service';// para traer las categorias desde el registro de consultas
import { Categoria } from '../consulta/consulta.interface';
import { RegistroPersona_interface as Persona } from '../registro-de-personas/registro-de-personas.interface';

@Component({
  selector: 'app-reserva-de-turnos',
  templateUrl: './reserva-de-turnos.component.html',
  styleUrls: ['./reserva-de-turnos.component.css']
})
export class ReservaDeTurnosComponent implements OnInit {
  reservasFormateadas: ReservaDeTurnoFormateada[] = []; // Arreglo para almacenar las reservas
  personas: Persona[] = [];                                 // Declaración de la propiedad personas
  categorias: Categoria[] = [];                        //Arreglo para almacenar las categorias
  filtros: ReservaDeTurnoFiltro = {
    doctor: '',
    paciente: '',
    fechaDesde: '',
    fechaHasta: ''
  };
  categoriaVacia: Categoria = {
    isEditing: false,
    id: 0,
    descripcion: '',
  }
  personaVacia: Persona = {
    idPersona: 0,
    nombre: '',
    apellido: '',
    telefono: '',
    email: '',
    cedula: '',
    flag_es_doctor: false,
    isEditing: false
  }
  nuevaReserva: ReservaDeTurno = {
    id: 0,
    doctor: this.personaVacia,
    paciente: this.personaVacia,
    fecha: new Date(0),
    hora: '',
    categoria: this.categoriaVacia
  };
  isEditing: boolean[] = []; // Array to track if each reservation is in editing mode

  //para usar la lista de personas y categorias
  constructor(
    private reservaService: ReservaService,
    private personaService: RegistroPersonaService,
    private consultaService: ConsultaService
    ) {}

  ngOnInit(): void {
    this.initReservas(); // Carga las reservas del día actual por defecto
    this.loadPersonas(); // Carga la lista de personas
    this.loadCategorias();//Carga la lista de categorias
  }

  //Cargar las personas(Doctores y pacientes)
  loadPersonas(): void {
    this.personaService.getPersonas().subscribe((personas) => {
      // Aquí puedes acceder a la lista de personas (doctores y pacientes)
      this.personas = personas;
    });
  }

    //Cargar las categorias
  loadCategorias(): void {
    this.consultaService.getCategorias().subscribe((categorias) => {
      // Aquí puedes acceder a la lista de categorias
      this.categorias = categorias;
    });
  }
  

  // Carga las reservas del día actual
  initReservas(): void {
    this.filtros.fechaDesde = this.reservaService.formattedDate(new Date());
    this.filtros.fechaHasta = this.reservaService.formattedDate(new Date());
    
    // Llama al servicio para cargar las reservas con los filtros
    this.applyFilters();
  }

  // Aplicar filtros y cargar las reservas
  applyFilters(): void {
    // Llama al servicio para cargar las reservas con los filtros
    this.reservaService.getReservas(this.filtros).subscribe((reservasFormateadas) => {
      this.reservasFormateadas = reservasFormateadas;
    
    });
  }

  reservarTurno(): void {
    // Check if the required fields are not empty
    if (this.nuevaReserva.fecha && this.nuevaReserva.hora) {
      // Buscar el Doctor seleccionado en la lista de personas
      let doctorSeleccionado = this.personas.find(persona => persona === this.nuevaReserva.doctor);
      // Buscar el Paciente seleccionado en la lista de personas
      let pacienteSeleccionado = this.personas.find(persona => persona === this.nuevaReserva.paciente);

        // Verificar si se encontraron el Doctor y el Paciente
        if (doctorSeleccionado && pacienteSeleccionado) {
          // Crear una nueva instancia de ReservaDeTurno
          const nuevaReserva: ReservaDeTurno = {
            id: 0,
            doctor: doctorSeleccionado,
            paciente: pacienteSeleccionado,
            fecha: new Date(this.nuevaReserva.fecha + 'T00:00:00'),
            hora: this.nuevaReserva.hora,
            categoria: this.nuevaReserva.categoria
          };

          // Call the service to add the new reservation
      this.reservaService.addReserva(nuevaReserva).subscribe(() => {
        // Reload the reservations with filters applied
        this.applyFilters();
      });
     
      }
     
    }
  }
  

  // Cancela una reserva
  cancelReserva(idReserva: number): void {
    // Llama al servicio para cancelar la reserva por su ID
    this.reservaService.cancelReserva(idReserva).subscribe(() => {
      // Actualiza la lista de reservas después de la cancelación
      this.applyFilters();
    });
  }

}


reserva-de-turnos.interface.ts
import { Categoria } from "../consulta/consulta.interface";
import { RegistroPersona_interface as Persona } from "../registro-de-personas/registro-de-personas.interface";

export interface ReservaDeTurno {
  id: number; // ID único de la reserva
  doctor: Persona; // Nombre del doctor
  paciente: Persona; // Nombre del paciente
  fecha: Date; // Fecha de la reserva
  hora: string; // Horario de la reserva (por ejemplo, "09:00 - 10:00")
  categoria:Categoria;//Descripcion de la categoria
}


Reserva.service.ts
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { ReservaDeTurno } from 'src/app/components/reserva-de-turnos/reserva-de-turnos.interface';
import { ReservaDeTurnoFiltro } from './reserva-de-turnos-filtro.interface';
import { data_DatosDeReservas } from 'src/assets/data/reserva/data_reserva';
import { Categoria } from '../consulta/consulta.interface';

export type ReservaDeTurnoFormateada = {
  fecha: string;
  id: number;
  doctor: string;
  paciente: string;
  hora: string;
  categoria: Categoria;
}

@Injectable({
  providedIn: 'root'
})
export class ReservaService {
  reservas: ReservaDeTurno[]

  constructor() {
    this.reservas = data_DatosDeReservas;// Initialize with example data
  }

  formattedDate(date: Date){
    let dd = String(date.getDate()).padStart(2, '0');
    let mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0
    let yyyy = date.getFullYear();
    return yyyy + '/' + mm + '/' + dd;
  }

  // Get a list of reservations based on filters
  getReservas(filtros: ReservaDeTurnoFiltro): Observable<ReservaDeTurnoFormateada[]> {
    // Simulate filtering based on filters if needed
    let filteredReservas = this.reservas;

    if (filtros.doctor) {
      filteredReservas = filteredReservas.filter((reserva) =>
        reserva.doctor.nombre.toLowerCase().concat(' ',reserva.doctor.apellido.toLowerCase()).includes(filtros.doctor.toLowerCase())
      );
    }
    if (filtros.paciente) {
      filteredReservas = filteredReservas.filter((reserva) =>
      reserva.paciente.nombre.toLowerCase().concat(' ',reserva.paciente.apellido.toLowerCase()).includes(filtros.paciente.toLowerCase())
      );
    }
    if (filtros.fechaDesde) {
      filteredReservas = filteredReservas.filter((reserva) =>
        reserva.fecha >= new Date(filtros.fechaDesde.replace(/-/g, '/'))
      );
    }
    if (filtros.fechaHasta) {
      filteredReservas = filteredReservas.filter((reserva) =>
        reserva.fecha <= new Date(filtros.fechaHasta.replace(/-/g, '/'))
        );
    }

    // Format the 'fecha' property using Angular's formatDate
    let formattedReservas: ReservaDeTurnoFormateada[]  = filteredReservas.map((reserva) => {
      return {
        ...reserva,
        fecha: this.formattedDate(reserva.fecha), // Format the 'fecha' property
        doctor: (reserva.doctor.nombre + " " + reserva.doctor.apellido),
        paciente: (reserva.paciente.nombre + " " + reserva.paciente.apellido)
      };
    });

    return of(formattedReservas);
  }

  //metodo para obtener la lista de categorias, usada para otros componentes
  getAllReservas(): Observable<ReservaDeTurno[]>{
    return new Observable<ReservaDeTurno[]>(observer => {
      observer.next(this.reservas);
      observer.complete();
    });
  }

  // Add a new reservation
  addReserva(reserva: ReservaDeTurno): Observable<ReservaDeTurno[]> {
    // Generate a unique ID for the new reservation
    reserva.id = this.generateNewId();

    // Push the new reservation to the array
    this.reservas.push(reserva);
    console.log(reserva);
    return of(this.reservas);
  }

  // Cancel a reservation by its ID
  cancelReserva(idReserva: number): Observable<ReservaDeTurno[]> {
    const index = this.reservas.findIndex((r) => r.id === idReserva);

    if (index !== -1) {
      // Remove the reservation from the array
      this.reservas.splice(index, 1);
    }

    return of(this.reservas);
  }

  // Generate a unique ID for a new reservation (you may need to implement this logic)
  generateNewId(): number {
    // Find the maximum ID in the current data
    const maxId = Math.max(...this.reservas.map((p) => p.id));

    // Generate a new ID by incrementing the maximum ID
    return maxId + 1;
  }
}




--------------------------------------------------------------------------------
File: Reserva.service.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\components\reserva-de-turnos\Reserva.service.ts
Content:
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { ReservaDeTurno } from 'src/app/components/reserva-de-turnos/reserva-de-turnos.interface';
import { ReservaDeTurnoFiltro } from './reserva-de-turnos-filtro.interface';
import { data_DatosDeReservas } from 'src/assets/data/reserva/data_reserva';
import { Categoria } from '../consulta/consulta.interface';

export type ReservaDeTurnoFormateada = {
  fecha: string;
  id: number;
  doctor: string;
  paciente: string;
  hora: string;
  categoria: Categoria;
}

@Injectable({
  providedIn: 'root'
})
export class ReservaService {
  reservas: ReservaDeTurno[]

  constructor() {
    this.reservas = data_DatosDeReservas;// Initialize with example data
  }

  formattedDate(date: Date){
    let dd = String(date.getDate()).padStart(2, '0');
    let mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0
    let yyyy = date.getFullYear();
    return yyyy + '/' + mm + '/' + dd;
  }

  // Get a list of reservations based on filters
  getReservas(filtros: ReservaDeTurnoFiltro): Observable<ReservaDeTurnoFormateada[]> {
    // Simulate filtering based on filters if needed
    let filteredReservas = this.reservas;

    if (filtros.doctor) {
      filteredReservas = filteredReservas.filter((reserva) =>
        reserva.doctor.nombre.toLowerCase().concat(' ',reserva.doctor.apellido.toLowerCase()).includes(filtros.doctor.toLowerCase())
      );
    }
    if (filtros.paciente) {
      filteredReservas = filteredReservas.filter((reserva) =>
      reserva.paciente.nombre.toLowerCase().concat(' ',reserva.paciente.apellido.toLowerCase()).includes(filtros.paciente.toLowerCase())
      );
    }
    if (filtros.fechaDesde) {
      filteredReservas = filteredReservas.filter((reserva) =>
        reserva.fecha >= new Date(filtros.fechaDesde.replace(/-/g, '/'))
      );
    }
    if (filtros.fechaHasta) {
      filteredReservas = filteredReservas.filter((reserva) =>
        reserva.fecha <= new Date(filtros.fechaHasta.replace(/-/g, '/'))
        );
    }

    // Format the 'fecha' property using Angular's formatDate
    let formattedReservas: ReservaDeTurnoFormateada[]  = filteredReservas.map((reserva) => {
      return {
        ...reserva,
        fecha: this.formattedDate(reserva.fecha), // Format the 'fecha' property
        doctor: (reserva.doctor.nombre + " " + reserva.doctor.apellido),
        paciente: (reserva.paciente.nombre + " " + reserva.paciente.apellido)
      };
    });

    return of(formattedReservas);
  }

  //metodo para obtener la lista de categorias, usada para otros componentes
  getAllReservas(): Observable<ReservaDeTurno[]>{
    return new Observable<ReservaDeTurno[]>(observer => {
      observer.next(this.reservas);
      observer.complete();
    });
  }

  // Add a new reservation
  addReserva(reserva: ReservaDeTurno): Observable<ReservaDeTurno[]> {
    // Generate a unique ID for the new reservation
    reserva.id = this.generateNewId();

    // Push the new reservation to the array
    this.reservas.push(reserva);
    console.log(reserva);
    return of(this.reservas);
  }

  // Cancel a reservation by its ID
  cancelReserva(idReserva: number): Observable<ReservaDeTurno[]> {
    const index = this.reservas.findIndex((r) => r.id === idReserva);

    if (index !== -1) {
      // Remove the reservation from the array
      this.reservas.splice(index, 1);
    }

    return of(this.reservas);
  }

  // Generate a unique ID for a new reservation (you may need to implement this logic)
  generateNewId(): number {
    // Find the maximum ID in the current data
    const maxId = Math.max(...this.reservas.map((p) => p.id));

    // Generate a new ID by incrementing the maximum ID
    return maxId + 1;
  }
}


--------------------------------------------------------------------------------
File: footer.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\footer\footer.component.css
Content:
.footer{
  width: calc(100% - 6rem);
  height: 25px;
  margin-left: 5rem;
  z-index: 0;
  position: relative;
  bottom: 0;
  transition: all .5s ease;
  background: #a3abc0ff;
  padding: 3rem;
}

.footer-trimmed{
  width: calc(100% - 17rem);
  margin-left: 17rem;
}

.footer-md-screen{
  width: calc(100% - 6rem);
  margin-left: 6rem;
}


--------------------------------------------------------------------------------
File: footer.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\footer\footer.component.html
Content:
<div class="footer" [ngClass]="getFooterClass()">
  <p>&copy; FrontEnd, Designed by: Ivan Weiss, Emilio Ginzo, Marco Chongsu, Antonio Insfran </p>
</div>


--------------------------------------------------------------------------------
File: footer.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\footer\footer.component.ts
Content:
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.css']
})
export class FooterComponent {
  constructor(){}
  ngOnInit(): void{}

  @Input() collapsed = false;
  @Input() screenWidth = 0;


  getFooterClass(): string{
    let styleClass = '';
    if(this.collapsed && this.screenWidth > 768){
      styleClass = 'footer-trimmed';
    } else if(this.collapsed && this.screenWidth <= 768 && this.screenWidth > 0){
      styleClass = 'footer-md-screen';
    }
    return styleClass;
  }
}


--------------------------------------------------------------------------------
File: footer.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\footer\footer.txt
Content:
footer.component.css
.footer{
  width: calc(100% - 6rem);
  height: 25px;
  margin-left: 5rem;
  z-index: 0;
  position: relative;
  bottom: 0;
  transition: all .5s ease;
  background: #a3abc0ff;
  padding: 3rem;
}

.footer-trimmed{
  width: calc(100% - 17rem);
  margin-left: 17rem;
}

.footer-md-screen{
  width: calc(100% - 6rem);
  margin-left: 6rem;
}


footer.component.html
<div class="footer" [ngClass]="getFooterClass()">
  <p>&copy; FrontEnd, Designed by: Ivan Weiss, Emilio Ginzo, Marco Chongsu, Antonio Insfran </p>
</div>


footer.component.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.css']
})
export class FooterComponent {
  constructor(){}
  ngOnInit(): void{}

  @Input() collapsed = false;
  @Input() screenWidth = 0;


  getFooterClass(): string{
    let styleClass = '';
    if(this.collapsed && this.screenWidth > 768){
      styleClass = 'footer-trimmed';
    } else if(this.collapsed && this.screenWidth <= 768 && this.screenWidth > 0){
      styleClass = 'footer-md-screen';
    }
    return styleClass;
  }
}




--------------------------------------------------------------------------------
File: nav-data.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\sidenav\nav-data.ts
Content:
export const navbarData = [
  {
    routelink: '',
    icon: 'fal fa-home',
    label: 'Inicio'
  },

  {
    routelink: 'consultas',
    icon: 'fal fa-tags',
    label: 'Categoria de Consultas'
  },

  {
    routelink: 'registro-de-personas',
    icon: 'fal fa-file',
    label: 'Registro De Personas'
  },

  {
    routelink: 'reserva-de-turnos',
    icon: 'fal fa-pen-nib',
    label: 'Reserva de Turnos'
  },
  {
    routelink: 'ficha-clinica',
    icon: 'fal fa-list',
    label: 'Ficha Clinica'
  }




];


--------------------------------------------------------------------------------
File: sidenav.component.css
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\sidenav\sidenav.component.css
Content:
/*@import "~bootstrap/dist/css/bootstrap.css";
*/
.sidenav {
  background: #263238 ;
  transition: all .5s ease;
  position: fixed;
  z-index: 1;
  top:0;
  width: 5.5rem;
  height: 100vh;
  box-shadow: 0.063rem 0 1.25rem 0 #8690a3;

}

.logo-container{
  display: flex;
  align-items: center;
  padding: 0.938rem 0.938rem 0 0.938rem;
  width: 100%;

  .logo{
    background: #fff;
    text-align: center;
    width: 4rem;
    min-width: 4rem;
    border-radius: 0.313rem;
    padding: 0.313rem;
    font-size: 24px;
    font-weight: 900;
    cursor: pointer;
    border: none;
    height: auto;

  }

  .logo-text{
    margin-left: 1.5rem;
    font-size: 24px;
    font-weight: 700;
    color: #fff;
  }

  .btn-close{
    margin-left: auto;
    cursor: pointer;
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    background-color: transparent;
    border: none;

    .fa-times{
      color:#fff;
      font-size: 24px;
    }
  }
}

.sidenav-collapsed{
  width: 17rem;
}

.sidenav-nav{
  list-style: none;
  padding: 0.938rem;
  margin: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  height: calc(100%-3.65rem);
  cursor: pointer;

  .sidenav-nav-item{
    width: 100%;
    margin-bottom: 0.625rem;

    .sidenav-nav-link{
      display: flex;
      align-items: center;
      height: 3rem;
      color: #f3f3f3;
      text-decoration: none;
      border-radius: 0.625rem;
      transition: all .3s ease;

      .sidenav-link-icon{
        font-size: 22px;
        width: 3rem;
        min-width: 3rem;
        margin: 0 0.5rem;
        text-align: center;
      }

      .sidenav-link-text{
        margin-left: 1.5rem;
      }
    }
  }

  .sidenav-nav-item:hover{
    .sidenav-nav-link{
      background-color: #fff;
      color: #000;
    }
  }
}

.active{
  background-color: #fff;

  .sidenav-link-icon,
  .sidenav-link-text{
    color:#000;
  }
}


--------------------------------------------------------------------------------
File: sidenav.component.html
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\sidenav\sidenav.component.html
Content:
<div class= "sidenav" [ngClass]="collapsed ? 'sidenav-collapsed':''" >
  <div class= "logo-container">
    <button class= "logo" (click)="toggleCollapse()">{{logo}}</button>
    <div class= "logo-text" @fadeInOut *ngIf="collapsed">{{logoName}}</div>
    <button class= "btn-close" @rotate *ngIf="collapsed" (click)="closeSidenav()">
      <i class="fal fa-times close-icon"></i>
    </button>
  </div>
  <ul class= "sidenav-nav">
    <li class="sidenav-nav-item" *ngFor="let data of navData">
      <a class= "sidenav-nav-link"
        [routerLink]="[data.routelink]"
        routerLinkActive="active"
        [routerLinkActiveOptions] = "{exact: true}"
      >
        <i class= "sidenav-link-icon"  [class]="data.icon"></i>
        <span class="sidenav-link-text" @fadeInOut *ngIf="collapsed">{{data.label}}</span>
      </a>
    </li>
  </ul>
</div>


--------------------------------------------------------------------------------
File: sidenav.component.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\sidenav\sidenav.component.ts
Content:
import { Component, Output, EventEmitter, OnInit, HostListener } from '@angular/core';
import { navbarData } from './nav-data';
import { animate, keyframes, style, transition, trigger } from '@angular/animations';
interface SideNavToggle{
  screenWidth: number;
  collapsed: boolean;
}

@Component({
  selector: 'app-sidenav',
  templateUrl: './sidenav.component.html',
  styleUrls: ['./sidenav.component.css'],
  animations: [
    trigger('fadeInOut',[
      transition(':enter',[
        style({opacity:0}),
        animate('350ms'),
          style({opacity: 1})
      ]),
      transition(':leave',[
        style({opacity:1}),
        animate('350ms'),
          style({opacity: 0})
      ])
    ]),
    trigger('rotate',[
      transition(':enter', [
        animate('500ms',
          keyframes([
            style({transform: 'rotate(0deg)', offset: '0'}),
            style({transform: 'rotate(2turn)', offset: '1'}),

          ])
        )
      ])
    ])
  ]
})
export class SidenavComponent implements OnInit{
  @Output() onToggleSideNav: EventEmitter<SideNavToggle> = new EventEmitter;
  collapsed = false;
  screenWidth = 0;
  navData = navbarData;
  logo = 'PTS';
  logoName = 'Patient Tracking';

  @HostListener('window:resize', ['$event'])
  onResize(event: any){
    this.screenWidth = window.innerWidth;
    if(this.screenWidth <=768){
      this.collapsed = false;
      this.onToggleSideNav.emit({collapsed: this.collapsed, screenWidth: this.screenWidth});
    }
  }

  ngOnInit(): void{
    this.screenWidth = window.innerWidth;
  }

  toggleCollapse():void{
    this.collapsed = !this.collapsed
    this.onToggleSideNav.emit({collapsed: this.collapsed, screenWidth: this.screenWidth});
  }

  closeSidenav():void{
    this.collapsed = false;
    this.onToggleSideNav.emit({collapsed: this.collapsed, screenWidth: this.screenWidth});
  }
}


--------------------------------------------------------------------------------
File: sidenav.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\app\sidenav\sidenav.txt
Content:
nav-data.ts
export const navbarData = [
  {
    routelink: '',
    icon: 'fal fa-home',
    label: 'Inicio'
  },

  {
    routelink: 'consultas',
    icon: 'fal fa-tags',
    label: 'Categoria de Consultas'
  },

  {
    routelink: 'registro-de-personas',
    icon: 'fal fa-file',
    label: 'Registro De Personas'
  },

  {
    routelink: 'reserva-de-turnos',
    icon: 'fal fa-pen-nib',
    label: 'Reserva de Turnos'
  },
  {
    routelink: 'ficha-clinica',
    icon: 'fal fa-list',
    label: 'Ficha Clinica'
  }




];


sidenav.component.css
/*@import "~bootstrap/dist/css/bootstrap.css";
*/
.sidenav {
  background: #263238 ;
  transition: all .5s ease;
  position: fixed;
  z-index: 1;
  top:0;
  width: 5.5rem;
  height: 100vh;
  box-shadow: 0.063rem 0 1.25rem 0 #8690a3;

}

.logo-container{
  display: flex;
  align-items: center;
  padding: 0.938rem 0.938rem 0 0.938rem;
  width: 100%;

  .logo{
    background: #fff;
    text-align: center;
    width: 4rem;
    min-width: 4rem;
    border-radius: 0.313rem;
    padding: 0.313rem;
    font-size: 24px;
    font-weight: 900;
    cursor: pointer;
    border: none;
    height: auto;

  }

  .logo-text{
    margin-left: 1.5rem;
    font-size: 24px;
    font-weight: 700;
    color: #fff;
  }

  .btn-close{
    margin-left: auto;
    cursor: pointer;
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    background-color: transparent;
    border: none;

    .fa-times{
      color:#fff;
      font-size: 24px;
    }
  }
}

.sidenav-collapsed{
  width: 17rem;
}

.sidenav-nav{
  list-style: none;
  padding: 0.938rem;
  margin: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  height: calc(100%-3.65rem);
  cursor: pointer;

  .sidenav-nav-item{
    width: 100%;
    margin-bottom: 0.625rem;

    .sidenav-nav-link{
      display: flex;
      align-items: center;
      height: 3rem;
      color: #f3f3f3;
      text-decoration: none;
      border-radius: 0.625rem;
      transition: all .3s ease;

      .sidenav-link-icon{
        font-size: 22px;
        width: 3rem;
        min-width: 3rem;
        margin: 0 0.5rem;
        text-align: center;
      }

      .sidenav-link-text{
        margin-left: 1.5rem;
      }
    }
  }

  .sidenav-nav-item:hover{
    .sidenav-nav-link{
      background-color: #fff;
      color: #000;
    }
  }
}

.active{
  background-color: #fff;

  .sidenav-link-icon,
  .sidenav-link-text{
    color:#000;
  }
}


sidenav.component.html
<div class= "sidenav" [ngClass]="collapsed ? 'sidenav-collapsed':''" >
  <div class= "logo-container">
    <button class= "logo" (click)="toggleCollapse()">{{logo}}</button>
    <div class= "logo-text" @fadeInOut *ngIf="collapsed">{{logoName}}</div>
    <button class= "btn-close" @rotate *ngIf="collapsed" (click)="closeSidenav()">
      <i class="fal fa-times close-icon"></i>
    </button>
  </div>
  <ul class= "sidenav-nav">
    <li class="sidenav-nav-item" *ngFor="let data of navData">
      <a class= "sidenav-nav-link"
        [routerLink]="[data.routelink]"
        routerLinkActive="active"
        [routerLinkActiveOptions] = "{exact: true}"
      >
        <i class= "sidenav-link-icon"  [class]="data.icon"></i>
        <span class="sidenav-link-text" @fadeInOut *ngIf="collapsed">{{data.label}}</span>
      </a>
    </li>
  </ul>
</div>


sidenav.component.ts
import { Component, Output, EventEmitter, OnInit, HostListener } from '@angular/core';
import { navbarData } from './nav-data';
import { animate, keyframes, style, transition, trigger } from '@angular/animations';
interface SideNavToggle{
  screenWidth: number;
  collapsed: boolean;
}

@Component({
  selector: 'app-sidenav',
  templateUrl: './sidenav.component.html',
  styleUrls: ['./sidenav.component.css'],
  animations: [
    trigger('fadeInOut',[
      transition(':enter',[
        style({opacity:0}),
        animate('350ms'),
          style({opacity: 1})
      ]),
      transition(':leave',[
        style({opacity:1}),
        animate('350ms'),
          style({opacity: 0})
      ])
    ]),
    trigger('rotate',[
      transition(':enter', [
        animate('500ms',
          keyframes([
            style({transform: 'rotate(0deg)', offset: '0'}),
            style({transform: 'rotate(2turn)', offset: '1'}),

          ])
        )
      ])
    ])
  ]
})
export class SidenavComponent implements OnInit{
  @Output() onToggleSideNav: EventEmitter<SideNavToggle> = new EventEmitter;
  collapsed = false;
  screenWidth = 0;
  navData = navbarData;
  logo = 'PTS';
  logoName = 'Patient Tracking';

  @HostListener('window:resize', ['$event'])
  onResize(event: any){
    this.screenWidth = window.innerWidth;
    if(this.screenWidth <=768){
      this.collapsed = false;
      this.onToggleSideNav.emit({collapsed: this.collapsed, screenWidth: this.screenWidth});
    }
  }

  ngOnInit(): void{
    this.screenWidth = window.innerWidth;
  }

  toggleCollapse():void{
    this.collapsed = !this.collapsed
    this.onToggleSideNav.emit({collapsed: this.collapsed, screenWidth: this.screenWidth});
  }

  closeSidenav():void{
    this.collapsed = false;
    this.onToggleSideNav.emit({collapsed: this.collapsed, screenWidth: this.screenWidth});
  }
}




--------------------------------------------------------------------------------
File: .gitkeep
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\.gitkeep
Content:


--------------------------------------------------------------------------------
File: assets.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\assets.txt
Content:
.gitkeep


date-utils.ts
export function formatDate(date: Date): string {
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
}




--------------------------------------------------------------------------------
File: date-utils.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\date-utils.ts
Content:
export function formatDate(date: Date): string {
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
}


--------------------------------------------------------------------------------
File: data.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\data.txt
Content:


--------------------------------------------------------------------------------
File: consulta.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\consulta\consulta.txt
Content:
data_consulta.ts
import { Categoria } from "src/app/components/consulta/consulta.interface"

export const Data_consulta: Categoria[] = [
    { "id": 1, "descripcion": "Cardiología", isEditing: false },
    { "id": 2, "descripcion": "Dermatología", isEditing: false },
    { "id": 3, "descripcion": "Gastroenterología", isEditing: false },
    { "id": 4, "descripcion": "Neurología", isEditing: false },
    { "id": 5, "descripcion": "Oftalmología", isEditing: false },
    { "id": 6, "descripcion": "Ortopedia", isEditing: false },
    { "id": 7, "descripcion": "Pediatría", isEditing: false },
    { "id": 8, "descripcion": "Psiquiatría", isEditing: false },
    { "id": 9, "descripcion": "Radiología", isEditing: false },
    { "id": 10, "descripcion": "Urología", isEditing: false }
];



--------------------------------------------------------------------------------
File: data_consulta.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\consulta\data_consulta.ts
Content:
import { Categoria } from "src/app/components/consulta/consulta.interface"

export const Data_consulta: Categoria[] = [
    { "id": 1, "descripcion": "Cardiología", isEditing: false },
    { "id": 2, "descripcion": "Dermatología", isEditing: false },
    { "id": 3, "descripcion": "Gastroenterología", isEditing: false },
    { "id": 4, "descripcion": "Neurología", isEditing: false },
    { "id": 5, "descripcion": "Oftalmología", isEditing: false },
    { "id": 6, "descripcion": "Ortopedia", isEditing: false },
    { "id": 7, "descripcion": "Pediatría", isEditing: false },
    { "id": 8, "descripcion": "Psiquiatría", isEditing: false },
    { "id": 9, "descripcion": "Radiología", isEditing: false },
    { "id": 10, "descripcion": "Urología", isEditing: false }
];

--------------------------------------------------------------------------------
File: data_fichaClinica.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\fichaClinica\data_fichaClinica.ts
Content:
import { FichaClinica } from "src/app/components/ficha-clinica/ficha-clinica.interface"
import { data_DatosDeReservas as Reservas } from "../reserva/data_reserva"
import { Data_consulta as Categoria } from "../consulta/data_consulta";
import { Data_RegistroDePersonas as Personas } from "../RegistroDePersonas/RegistroDePersonas";

export const Data_fichasClinicas: FichaClinica[] = [
  {
    "id": 1,
    "paciente": Personas[10],
    "doctor": Personas[0],
    "motivoConsulta": "Dolor de cabeza",
    "diagnostico": "Migraña",
    "fecha": new Date('2023/10/27'),
    "reserva": Reservas[42],
    "categoria": Categoria[5]
  },
  {
    "id": 2,
    "paciente": Personas[11],
    "doctor": Personas[1],
    "motivoConsulta": "Fiebre",
    "diagnostico": "Resfriado común",
    "fecha": new Date('2023/10/26'),
    "reserva": Reservas[108],
    "categoria": Categoria[8]
  },
  {
    "id": 3,
    "paciente": Personas[12],
    "doctor": Personas[2],
    "motivoConsulta": "Dolor abdominal",
    "diagnostico": "Apendicitis",
    "fecha": new Date('2023/10/25'),
    "reserva": Reservas[54],
    "categoria": Categoria[2]
  },
  {
    "id": 4,
    "paciente": Personas[13],
    "doctor": Personas[3],
    "motivoConsulta": "Fatiga",
    "diagnostico": "Anemia",
    "fecha": new Date('2023/10/22'),
    "reserva": Reservas[92],
    "categoria": Categoria[7]
  },
  {
    "id": 5,
    "paciente": Personas[14],
    "doctor": Personas[4],
    "motivoConsulta": "Dolor en el pecho",
    "diagnostico": "Infarto de miocardio",
    "fecha": new Date('2023/09/15'),
    "reserva": Reservas[154],
    "categoria": Categoria[1]
  },
  {
    "id": 6,
    "paciente": Personas[15],
    "doctor": Personas[5],
    "motivoConsulta": "Náuseas",
    "diagnostico": "Gastritis",
    "fecha": new Date('2023/08/30'),
    "reserva": Reservas[66],
    "categoria": Categoria[6]
  },
  {
    "id": 7,
    "paciente": Personas[16],
    "doctor": Personas[6],
    "motivoConsulta": "Problemas respiratorios",
    "diagnostico": "Asma",
    "fecha": new Date('2023/09/20'),
    "reserva": Reservas[37],
    "categoria": Categoria[4]
  },
  {
    "id": 8,
    "paciente": Personas[17],
    "doctor": Personas[7],
    "motivoConsulta": "Dolor de espalda",
    "diagnostico": "Hernia de disco",
    "fecha": new Date('2023/10/16'),
    "reserva": Reservas[174],
    "categoria": Categoria[3]
  },
  {
    "id": 9,
    "paciente": Personas[18],
    "doctor": Personas[8],
    "motivoConsulta": "Dolor de garganta",
    "diagnostico": "Amigdalitis",
    "fecha": new Date('2023/09/17'),
    "reserva": Reservas[50],
    "categoria": Categoria[9]
  },
  {
    "id": 10,
    "paciente": Personas[19],
    "doctor": Personas[9],
    "motivoConsulta": "Mareos",
    "diagnostico": "Vértigo",
    "fecha": new Date('2023/09/06'),
    "reserva": Reservas[124],
    "categoria": Categoria[0]
  },
  {
    "id": 11,
    "paciente": Personas[20],
    "doctor": Personas[0],
    "motivoConsulta": "Dolor de cabeza",
    "diagnostico": "Migraña",
    "fecha": new Date('2023/10/09'),
    "reserva": Reservas[33],
    "categoria": Categoria[7]
  },
  {
    "id": 12,
    "paciente": Personas[21],
    "doctor": Personas[1],
    "motivoConsulta": "Fiebre",
    "diagnostico": "Resfriado común",
    "fecha": new Date('2023/09/11'),
    "reserva": Reservas[172],
    "categoria": Categoria[2]
  },
  {
    "id": 13,
    "paciente": Personas[22],
    "doctor": Personas[2],
    "motivoConsulta": "Dolor abdominal",
    "diagnostico": "Apendicitis",
    "fecha": new Date('2023/09/18'),
    "reserva": Reservas[43],
    "categoria": Categoria[5]
  },
  {
    "id": 14,
    "paciente": Personas[23],
    "doctor": Personas[3],
    "motivoConsulta": "Fatiga",
    "diagnostico": "Anemia",
    "fecha": new Date('2023/08/25'),
    "reserva": Reservas[93],
    "categoria": Categoria[8]
  },
  {
    "id": 15,
    "paciente": Personas[10],
    "doctor": Personas[4],
    "motivoConsulta": "Dolor en el pecho",
    "diagnostico": "Infarto de miocardio",
    "fecha": new Date('2023/08/04'),
    "reserva": Reservas[114],
    "categoria": Categoria[4]
  },
  {
    "id": 16,
    "paciente": Personas[11],
    "doctor": Personas[5],
    "motivoConsulta": "Náuseas",
    "diagnostico": "Gastritis",
    "fecha": new Date('2023/08/26'),
    "reserva": Reservas[88],
    "categoria": Categoria[1]
  },
  {
    "id": 17,
    "paciente": Personas[12],
    "doctor": Personas[6],
    "motivoConsulta": "Problemas respiratorios",
    "diagnostico": "Asma",
    "fecha": new Date('2023/08/01'),
    "reserva": Reservas[0],
    "categoria": Categoria[3]
  },
  {
    "id": 18,
    "paciente": Personas[13],
    "doctor": Personas[7],
    "motivoConsulta": "Dolor de espalda",
    "diagnostico": "Hernia de disco",
    "fecha": new Date('2023/08/14'),
    "reserva": Reservas[142],
    "categoria": Categoria[6]
  },
  {
    "id": 19,
    "paciente": Personas[14],
    "doctor": Personas[8],
    "motivoConsulta": "Dolor de garganta",
    "diagnostico": "Amigdalitis",
    "fecha": new Date('2023/10/07'),
    "reserva": Reservas[116],
    "categoria": Categoria[9]
  },
  {
    "id": 20,
    "paciente": Personas[15],
    "doctor": Personas[9],
    "motivoConsulta": "Mareos",
    "diagnostico": "Vértigo",
    "fecha": new Date('2023/08/16'),
    "reserva": Reservas[102],
    "categoria": Categoria[0]
  },
  {
    "id": 21,
    "paciente": Personas[16],
    "doctor": Personas[0],
    "motivoConsulta": "Dolor de cabeza",
    "diagnostico": "Migraña",
    "fecha": new Date('2023/10/08'),
    "reserva": Reservas[129],
    "categoria": Categoria[4]
  },
  {
    "id": 22,
    "paciente": Personas[17],
    "doctor": Personas[1],
    "motivoConsulta": "Fiebre",
    "diagnostico": "Resfriado común",
    "fecha": new Date('2023/08/16'),
    "reserva": Reservas[49],
    "categoria": Categoria[2]
  },
  {
    "id": 23,
    "paciente": Personas[18],
    "doctor": Personas[2],
    "motivoConsulta": "Dolor abdominal",
    "diagnostico": "Apendicitis",
    "fecha": new Date('2023/08/14'),
    "reserva": Reservas[29],
    "categoria": Categoria[8]
  },
  {
    "id": 24,
    "paciente": Personas[19],
    "doctor": Personas[3],
    "motivoConsulta": "Fatiga",
    "diagnostico": "Anemia",
    "fecha": new Date('2023/08/11'),
    "reserva": Reservas[145],
    "categoria": Categoria[7]
  },
  {
    "id": 25,
    "paciente": Personas[20],
    "doctor": Personas[4],
    "motivoConsulta": "Dolor en el pecho",
    "diagnostico": "Infarto de miocardio",
    "fecha": new Date('2023/08/08'),
    "reserva": Reservas[195],
    "categoria": Categoria[3]
  },
  {
    "id": 26,
    "paciente": Personas[21],
    "doctor": Personas[5],
    "motivoConsulta": "Náuseas",
    "diagnostico": "Gastritis",
    "fecha": new Date('2023/08/01'),
    "reserva": Reservas[152],
    "categoria": Categoria[9]
  },
  {
    "id": 27,
    "paciente": Personas[22],
    "doctor": Personas[6],
    "motivoConsulta": "Problemas respiratorios",
    "diagnostico": "Asma",
    "fecha": new Date('2023/08/23'),
    "reserva": Reservas[168],
    "categoria": Categoria[5]
  },
  {
    "id": 28,
    "paciente": Personas[23],
    "doctor": Personas[7],
    "motivoConsulta": "Dolor de espalda",
    "diagnostico": "Hernia de disco",
    "fecha": new Date('2023/09/03'),
    "reserva": Reservas[24],
    "categoria": Categoria[6]
  },
  {
    "id": 29,
    "paciente": Personas[10],
    "doctor": Personas[8],
    "motivoConsulta": "Dolor de garganta",
    "diagnostico": "Amigdalitis",
    "fecha": new Date('2023/08/13'),
    "reserva": Reservas[165],
    "categoria": Categoria[1]
  },
  {
    "id": 30,
    "paciente": Personas[11],
    "doctor": Personas[9],
    "motivoConsulta": "Mareos",
    "diagnostico": "Vértigo",
    "fecha": new Date('2023/08/19'),
    "reserva": Reservas[34],
    "categoria": Categoria[0]
  }
]



--------------------------------------------------------------------------------
File: fichaClinica.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\fichaClinica\fichaClinica.txt
Content:
data_fichaClinica.ts
import { FichaClinica } from "src/app/components/ficha-clinica/ficha-clinica.interface"
import { data_DatosDeReservas as Reservas } from "../reserva/data_reserva"
import { Data_consulta as Categoria } from "../consulta/data_consulta";
import { Data_RegistroDePersonas as Personas } from "../RegistroDePersonas/RegistroDePersonas";

export const Data_fichasClinicas: FichaClinica[] = [
  {
    "id": 1,
    "paciente": Personas[10],
    "doctor": Personas[0],
    "motivoConsulta": "Dolor de cabeza",
    "diagnostico": "Migraña",
    "fecha": new Date('2023/10/27'),
    "reserva": Reservas[42],
    "categoria": Categoria[5]
  },
  {
    "id": 2,
    "paciente": Personas[11],
    "doctor": Personas[1],
    "motivoConsulta": "Fiebre",
    "diagnostico": "Resfriado común",
    "fecha": new Date('2023/10/26'),
    "reserva": Reservas[108],
    "categoria": Categoria[8]
  },
  {
    "id": 3,
    "paciente": Personas[12],
    "doctor": Personas[2],
    "motivoConsulta": "Dolor abdominal",
    "diagnostico": "Apendicitis",
    "fecha": new Date('2023/10/25'),
    "reserva": Reservas[54],
    "categoria": Categoria[2]
  },
  {
    "id": 4,
    "paciente": Personas[13],
    "doctor": Personas[3],
    "motivoConsulta": "Fatiga",
    "diagnostico": "Anemia",
    "fecha": new Date('2023/10/22'),
    "reserva": Reservas[92],
    "categoria": Categoria[7]
  },
  {
    "id": 5,
    "paciente": Personas[14],
    "doctor": Personas[4],
    "motivoConsulta": "Dolor en el pecho",
    "diagnostico": "Infarto de miocardio",
    "fecha": new Date('2023/09/15'),
    "reserva": Reservas[154],
    "categoria": Categoria[1]
  },
  {
    "id": 6,
    "paciente": Personas[15],
    "doctor": Personas[5],
    "motivoConsulta": "Náuseas",
    "diagnostico": "Gastritis",
    "fecha": new Date('2023/08/30'),
    "reserva": Reservas[66],
    "categoria": Categoria[6]
  },
  {
    "id": 7,
    "paciente": Personas[16],
    "doctor": Personas[6],
    "motivoConsulta": "Problemas respiratorios",
    "diagnostico": "Asma",
    "fecha": new Date('2023/09/20'),
    "reserva": Reservas[37],
    "categoria": Categoria[4]
  },
  {
    "id": 8,
    "paciente": Personas[17],
    "doctor": Personas[7],
    "motivoConsulta": "Dolor de espalda",
    "diagnostico": "Hernia de disco",
    "fecha": new Date('2023/10/16'),
    "reserva": Reservas[174],
    "categoria": Categoria[3]
  },
  {
    "id": 9,
    "paciente": Personas[18],
    "doctor": Personas[8],
    "motivoConsulta": "Dolor de garganta",
    "diagnostico": "Amigdalitis",
    "fecha": new Date('2023/09/17'),
    "reserva": Reservas[50],
    "categoria": Categoria[9]
  },
  {
    "id": 10,
    "paciente": Personas[19],
    "doctor": Personas[9],
    "motivoConsulta": "Mareos",
    "diagnostico": "Vértigo",
    "fecha": new Date('2023/09/06'),
    "reserva": Reservas[124],
    "categoria": Categoria[0]
  },
  {
    "id": 11,
    "paciente": Personas[20],
    "doctor": Personas[0],
    "motivoConsulta": "Dolor de cabeza",
    "diagnostico": "Migraña",
    "fecha": new Date('2023/10/09'),
    "reserva": Reservas[33],
    "categoria": Categoria[7]
  },
  {
    "id": 12,
    "paciente": Personas[21],
    "doctor": Personas[1],
    "motivoConsulta": "Fiebre",
    "diagnostico": "Resfriado común",
    "fecha": new Date('2023/09/11'),
    "reserva": Reservas[172],
    "categoria": Categoria[2]
  },
  {
    "id": 13,
    "paciente": Personas[22],
    "doctor": Personas[2],
    "motivoConsulta": "Dolor abdominal",
    "diagnostico": "Apendicitis",
    "fecha": new Date('2023/09/18'),
    "reserva": Reservas[43],
    "categoria": Categoria[5]
  },
  {
    "id": 14,
    "paciente": Personas[23],
    "doctor": Personas[3],
    "motivoConsulta": "Fatiga",
    "diagnostico": "Anemia",
    "fecha": new Date('2023/08/25'),
    "reserva": Reservas[93],
    "categoria": Categoria[8]
  },
  {
    "id": 15,
    "paciente": Personas[10],
    "doctor": Personas[4],
    "motivoConsulta": "Dolor en el pecho",
    "diagnostico": "Infarto de miocardio",
    "fecha": new Date('2023/08/04'),
    "reserva": Reservas[114],
    "categoria": Categoria[4]
  },
  {
    "id": 16,
    "paciente": Personas[11],
    "doctor": Personas[5],
    "motivoConsulta": "Náuseas",
    "diagnostico": "Gastritis",
    "fecha": new Date('2023/08/26'),
    "reserva": Reservas[88],
    "categoria": Categoria[1]
  },
  {
    "id": 17,
    "paciente": Personas[12],
    "doctor": Personas[6],
    "motivoConsulta": "Problemas respiratorios",
    "diagnostico": "Asma",
    "fecha": new Date('2023/08/01'),
    "reserva": Reservas[0],
    "categoria": Categoria[3]
  },
  {
    "id": 18,
    "paciente": Personas[13],
    "doctor": Personas[7],
    "motivoConsulta": "Dolor de espalda",
    "diagnostico": "Hernia de disco",
    "fecha": new Date('2023/08/14'),
    "reserva": Reservas[142],
    "categoria": Categoria[6]
  },
  {
    "id": 19,
    "paciente": Personas[14],
    "doctor": Personas[8],
    "motivoConsulta": "Dolor de garganta",
    "diagnostico": "Amigdalitis",
    "fecha": new Date('2023/10/07'),
    "reserva": Reservas[116],
    "categoria": Categoria[9]
  },
  {
    "id": 20,
    "paciente": Personas[15],
    "doctor": Personas[9],
    "motivoConsulta": "Mareos",
    "diagnostico": "Vértigo",
    "fecha": new Date('2023/08/16'),
    "reserva": Reservas[102],
    "categoria": Categoria[0]
  },
  {
    "id": 21,
    "paciente": Personas[16],
    "doctor": Personas[0],
    "motivoConsulta": "Dolor de cabeza",
    "diagnostico": "Migraña",
    "fecha": new Date('2023/10/08'),
    "reserva": Reservas[129],
    "categoria": Categoria[4]
  },
  {
    "id": 22,
    "paciente": Personas[17],
    "doctor": Personas[1],
    "motivoConsulta": "Fiebre",
    "diagnostico": "Resfriado común",
    "fecha": new Date('2023/08/16'),
    "reserva": Reservas[49],
    "categoria": Categoria[2]
  },
  {
    "id": 23,
    "paciente": Personas[18],
    "doctor": Personas[2],
    "motivoConsulta": "Dolor abdominal",
    "diagnostico": "Apendicitis",
    "fecha": new Date('2023/08/14'),
    "reserva": Reservas[29],
    "categoria": Categoria[8]
  },
  {
    "id": 24,
    "paciente": Personas[19],
    "doctor": Personas[3],
    "motivoConsulta": "Fatiga",
    "diagnostico": "Anemia",
    "fecha": new Date('2023/08/11'),
    "reserva": Reservas[145],
    "categoria": Categoria[7]
  },
  {
    "id": 25,
    "paciente": Personas[20],
    "doctor": Personas[4],
    "motivoConsulta": "Dolor en el pecho",
    "diagnostico": "Infarto de miocardio",
    "fecha": new Date('2023/08/08'),
    "reserva": Reservas[195],
    "categoria": Categoria[3]
  },
  {
    "id": 26,
    "paciente": Personas[21],
    "doctor": Personas[5],
    "motivoConsulta": "Náuseas",
    "diagnostico": "Gastritis",
    "fecha": new Date('2023/08/01'),
    "reserva": Reservas[152],
    "categoria": Categoria[9]
  },
  {
    "id": 27,
    "paciente": Personas[22],
    "doctor": Personas[6],
    "motivoConsulta": "Problemas respiratorios",
    "diagnostico": "Asma",
    "fecha": new Date('2023/08/23'),
    "reserva": Reservas[168],
    "categoria": Categoria[5]
  },
  {
    "id": 28,
    "paciente": Personas[23],
    "doctor": Personas[7],
    "motivoConsulta": "Dolor de espalda",
    "diagnostico": "Hernia de disco",
    "fecha": new Date('2023/09/03'),
    "reserva": Reservas[24],
    "categoria": Categoria[6]
  },
  {
    "id": 29,
    "paciente": Personas[10],
    "doctor": Personas[8],
    "motivoConsulta": "Dolor de garganta",
    "diagnostico": "Amigdalitis",
    "fecha": new Date('2023/08/13'),
    "reserva": Reservas[165],
    "categoria": Categoria[1]
  },
  {
    "id": 30,
    "paciente": Personas[11],
    "doctor": Personas[9],
    "motivoConsulta": "Mareos",
    "diagnostico": "Vértigo",
    "fecha": new Date('2023/08/19'),
    "reserva": Reservas[34],
    "categoria": Categoria[0]
  }
]





--------------------------------------------------------------------------------
File: RegistroDePersonas.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\RegistroDePersonas\RegistroDePersonas.ts
Content:
export const Data_RegistroDePersonas = [
  {
    "idPersona": 1,
    "nombre": 'John',
    "apellido": 'Doe',
    "telefono": '123-456-7890',
    "email": 'john.doe@example.com',
    "cedula": 'A12345',
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 2,
    "nombre": 'Jane',
    "apellido": 'Smith',
    "telefono": '987-654-3210',
    "email": 'jane.smith@example.com',
    "cedula": 'B67890',
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 3,
    "nombre": 'Dr. Robert',
    "apellido": 'Johnson',
    "telefono": '555-555-5555',
    "email": 'dr.robert@example.com',
    "cedula": 'C54321',
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 4,
    "nombre": 'Dr. Sarah',
    "apellido": 'Brown',
    "telefono": '444-444-4444',
    "email": 'dr.sarah@example.com',
    "cedula": 'D98765',
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 5,
    "nombre": "Rebecka",
    "apellido": "Piper",
    "telefono": "292-552-6705",
    "email": "rpiper0@storify.com",
    "cedula": "8049789",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 6,
    "nombre": "Wilburt",
    "apellido": "Garric",
    "telefono": "303-550-9242",
    "email": "wgarric0@networkadvertising.org",
    "cedula": "D98765",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 7,
    "nombre": "John",
    "apellido": "Doe",
    "telefono": "555-123-4567",
    "email": "johndoe@example.com",
    "cedula": "A12345",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 8,
    "nombre": "Jane",
    "apellido": "Smith",
    "telefono": "555-987-6543",
    "email": "janesmith@example.com",
    "cedula": "B54321",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 9,
    "nombre": "Michael",
    "apellido": "Johnson",
    "telefono": "555-789-1234",
    "email": "michaeljohnson@example.com",
    "cedula": "C98765",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 10,
    "nombre": "Sarah",
    "apellido": "Brown",
    "telefono": "555-234-5678",
    "email": "sarahbrown@example.com",
    "cedula": "D54321",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 11,
    "nombre": "David",
    "apellido": "Wilson",
    "telefono": "555-876-5432",
    "email": "davidwilson@example.com",
    "cedula": "E12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 12,
    "nombre": "Emily",
    "apellido": "Jones",
    "telefono": "555-345-6789",
    "email": "emilyjones@example.com",
    "cedula": "F98765",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 13,
    "nombre": "James",
    "apellido": "Davis",
    "telefono": "555-654-3210",
    "email": "jamesdavis@example.com",
    "cedula": "G54321",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 14,
    "nombre": "Olivia",
    "apellido": "Miller",
    "telefono": "555-432-1098",
    "email": "oliviamiller@example.com",
    "cedula": "H12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 15,
    "nombre": "William",
    "apellido": "Anderson",
    "telefono": "555-987-6543",
    "email": "williamanderson@example.com",
    "cedula": "I98765",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 16,
    "nombre": "Sophia",
    "apellido": "Brown",
    "telefono": "555-234-5678",
    "email": "sophiabrown@example.com",
    "cedula": "J54321",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 17,
    "nombre": "Ethan",
    "apellido": "Clark",
    "telefono": "555-876-5432",
    "email": "ethanclark@example.com",
    "cedula": "K12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 18,
    "nombre": "Ava",
    "apellido": "Davis",
    "telefono": "555-345-6789",
    "email": "avadavis@example.com",
    "cedula": "L98765",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 19,
    "nombre": "Logan",
    "apellido": "Evans",
    "telefono": "555-654-3210",
    "email": "loganevans@example.com",
    "cedula": "M54321",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 20,
    "nombre": "Mia",
    "apellido": "Foster",
    "telefono": "555-432-1098",
    "email": "miafoster@example.com",
    "cedula": "N12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 21,
    "nombre": "Noah",
    "apellido": "Garcia",
    "telefono": "555-789-1234",
    "email": "noahgarcia@example.com",
    "cedula": "O98765",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 22,
    "nombre": "Liam",
    "apellido": "Harris",
    "telefono": "555-987-6543",
    "email": "liamharris@example.com",
    "cedula": "P54321",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 23,
    "nombre": "Olivia",
    "apellido": "Jackson",
    "telefono": "555-234-5678",
    "email": "oliviajackson@example.com",
    "cedula": "Q12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 24,
    "nombre": "Emma",
    "apellido": "King",
    "telefono": "555-876-5432",
    "email": "emmaking@example.com",
    "cedula": "R98765",
    "flag_es_doctor": false,
    "isEditing": false
  }
];


--------------------------------------------------------------------------------
File: RegistroDePersonas.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\RegistroDePersonas\RegistroDePersonas.txt
Content:
RegistroDePersonas.ts
export const Data_RegistroDePersonas = [
  {
    "idPersona": 1,
    "nombre": 'John',
    "apellido": 'Doe',
    "telefono": '123-456-7890',
    "email": 'john.doe@example.com',
    "cedula": 'A12345',
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 2,
    "nombre": 'Jane',
    "apellido": 'Smith',
    "telefono": '987-654-3210',
    "email": 'jane.smith@example.com',
    "cedula": 'B67890',
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 3,
    "nombre": 'Dr. Robert',
    "apellido": 'Johnson',
    "telefono": '555-555-5555',
    "email": 'dr.robert@example.com',
    "cedula": 'C54321',
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 4,
    "nombre": 'Dr. Sarah',
    "apellido": 'Brown',
    "telefono": '444-444-4444',
    "email": 'dr.sarah@example.com',
    "cedula": 'D98765',
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 5,
    "nombre": "Rebecka",
    "apellido": "Piper",
    "telefono": "292-552-6705",
    "email": "rpiper0@storify.com",
    "cedula": "8049789",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 6,
    "nombre": "Wilburt",
    "apellido": "Garric",
    "telefono": "303-550-9242",
    "email": "wgarric0@networkadvertising.org",
    "cedula": "D98765",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 7,
    "nombre": "John",
    "apellido": "Doe",
    "telefono": "555-123-4567",
    "email": "johndoe@example.com",
    "cedula": "A12345",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 8,
    "nombre": "Jane",
    "apellido": "Smith",
    "telefono": "555-987-6543",
    "email": "janesmith@example.com",
    "cedula": "B54321",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 9,
    "nombre": "Michael",
    "apellido": "Johnson",
    "telefono": "555-789-1234",
    "email": "michaeljohnson@example.com",
    "cedula": "C98765",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 10,
    "nombre": "Sarah",
    "apellido": "Brown",
    "telefono": "555-234-5678",
    "email": "sarahbrown@example.com",
    "cedula": "D54321",
    "flag_es_doctor": true,
    "isEditing": false
  },
  {
    "idPersona": 11,
    "nombre": "David",
    "apellido": "Wilson",
    "telefono": "555-876-5432",
    "email": "davidwilson@example.com",
    "cedula": "E12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 12,
    "nombre": "Emily",
    "apellido": "Jones",
    "telefono": "555-345-6789",
    "email": "emilyjones@example.com",
    "cedula": "F98765",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 13,
    "nombre": "James",
    "apellido": "Davis",
    "telefono": "555-654-3210",
    "email": "jamesdavis@example.com",
    "cedula": "G54321",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 14,
    "nombre": "Olivia",
    "apellido": "Miller",
    "telefono": "555-432-1098",
    "email": "oliviamiller@example.com",
    "cedula": "H12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 15,
    "nombre": "William",
    "apellido": "Anderson",
    "telefono": "555-987-6543",
    "email": "williamanderson@example.com",
    "cedula": "I98765",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 16,
    "nombre": "Sophia",
    "apellido": "Brown",
    "telefono": "555-234-5678",
    "email": "sophiabrown@example.com",
    "cedula": "J54321",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 17,
    "nombre": "Ethan",
    "apellido": "Clark",
    "telefono": "555-876-5432",
    "email": "ethanclark@example.com",
    "cedula": "K12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 18,
    "nombre": "Ava",
    "apellido": "Davis",
    "telefono": "555-345-6789",
    "email": "avadavis@example.com",
    "cedula": "L98765",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 19,
    "nombre": "Logan",
    "apellido": "Evans",
    "telefono": "555-654-3210",
    "email": "loganevans@example.com",
    "cedula": "M54321",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 20,
    "nombre": "Mia",
    "apellido": "Foster",
    "telefono": "555-432-1098",
    "email": "miafoster@example.com",
    "cedula": "N12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 21,
    "nombre": "Noah",
    "apellido": "Garcia",
    "telefono": "555-789-1234",
    "email": "noahgarcia@example.com",
    "cedula": "O98765",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 22,
    "nombre": "Liam",
    "apellido": "Harris",
    "telefono": "555-987-6543",
    "email": "liamharris@example.com",
    "cedula": "P54321",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 23,
    "nombre": "Olivia",
    "apellido": "Jackson",
    "telefono": "555-234-5678",
    "email": "oliviajackson@example.com",
    "cedula": "Q12345",
    "flag_es_doctor": false,
    "isEditing": false
  },
  {
    "idPersona": 24,
    "nombre": "Emma",
    "apellido": "King",
    "telefono": "555-876-5432",
    "email": "emmaking@example.com",
    "cedula": "R98765",
    "flag_es_doctor": false,
    "isEditing": false
  }
];




--------------------------------------------------------------------------------
File: data_reserva.ts
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\reserva\data_reserva.ts
Content:
import { Data_consulta as Categorias } from "../consulta/data_consulta";
import { ReservaDeTurno } from "src/app/components/reserva-de-turnos/reserva-de-turnos.interface";
import { Data_RegistroDePersonas as Personas } from "../RegistroDePersonas/RegistroDePersonas";

const categorias = Categorias;
export const data_DatosDeReservas: ReservaDeTurno[] =
    [
{
  "id": 1,
  "doctor": Personas[2],
  "paciente": Personas[13],
  "fecha": new Date('2023/08/01'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[0]
},
{
  "id": 2,
  "doctor": Personas[8],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/11'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[1]
},
{
  "id": 3,
  "doctor": Personas[5],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/29'),
  "hora": "15:00 - 15:30",
  "categoria": categorias[2]
},
{
  "id": 4,
  "doctor": Personas[0],
  "paciente": Personas[10],
  "fecha": new Date('2023/09/12'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[3]
},
{
  "id": 5,
  "doctor": Personas[9],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/15'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[4]
},
{
  "id": 6,
  "doctor": Personas[7],
  "paciente": Personas[18],
  "fecha": new Date('2023/10/30'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[5]
},
{
  "id": 7,
  "doctor": Personas[3],
  "paciente": Personas[11],
  "fecha": new Date('2023/09/09'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[6]
},
{
  "id": 8,
  "doctor": Personas[4],
  "paciente": Personas[12],
  "fecha": new Date('2023/09/26'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[7]
},
{
  "id": 9,
  "doctor": Personas[1],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/05'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[8]
},
{
  "id": 10,
  "doctor": Personas[6],
  "paciente": Personas[14],
  "fecha": new Date('2023/09/17'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[9]
},
{
  "id": 11,
  "doctor": Personas[2],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/09'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[0]
},
{
  "id": 12,
  "doctor": Personas[3],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/06'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[1]
},
{
  "id": 13,
  "doctor": Personas[9],
  "paciente": Personas[23],
  "fecha": new Date('2023/10/25'),
  "hora": "13:30 - 14:00",
  "categoria": categorias[2]
},
{
  "id": 14,
  "doctor": Personas[1],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/10'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[3]
},
{
  "id": 15,
  "doctor": Personas[5],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/30'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[4]
},
{
  "id": 16,
  "doctor": Personas[2],
  "paciente": Personas[11],
  "fecha": new Date('2023/08/02'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[5]
},
{
  "id": 17,
  "doctor": Personas[1],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/18'),
  "hora": "15:30 - 16:00",
  "categoria": categorias[6]
},
{
  "id": 18,
  "doctor": Personas[8],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/22'),
  "hora": "11:00 - 11:30",
  "categoria": categorias[7]
},
{
  "id": 19,
  "doctor": Personas[2],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/27'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[8]
},
{
  "id": 20,
  "doctor": Personas[8],
  "paciente": Personas[20],
  "fecha": new Date('2023/08/03'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[9]
},
{
  "id": 21,
  "doctor": Personas[2],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/15'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[0]
},
{
  "id": 22,
  "doctor": Personas[1],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/03'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[1]
},
{
  "id": 23,
  "doctor": Personas[6],
  "paciente": Personas[20],
  "fecha": new Date('2023/08/27'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[2]
},
{
  "id": 24,
  "doctor": Personas[6],
  "paciente": Personas[22],
  "fecha": new Date('2023/10/02'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[3]
},
{
  "id": 25,
  "doctor": Personas[7],
  "paciente": Personas[13],
  "fecha": new Date('2023/09/14'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[4]
},
{
  "id": 26,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/29'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[5]
},
{
  "id": 27,
  "doctor": Personas[9],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/07'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[6]
},
{
  "id": 28,
  "doctor": Personas[2],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/27'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[7]
},
{
  "id": 29,
  "doctor": Personas[5],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/14'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[8]
},
{
  "id": 30,
  "doctor": Personas[2],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/25'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[9]
},
{
  "id": 31,
  "doctor": Personas[3],
  "paciente": Personas[11],
  "fecha": new Date('2023/08/05'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[0]
},
{
  "id": 32,
  "doctor": Personas[4],
  "paciente": Personas[12],
  "fecha": new Date('2023/08/30'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[1]
},
{
  "id": 33,
  "doctor": Personas[1],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/16'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[2]
},
{
  "id": 34,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/09'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[3]
},
{
  "id": 35,
  "doctor": Personas[4],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/19'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[4]
},
{
  "id": 36,
  "doctor": Personas[3],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/11'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[5]
},
{
  "id": 37,
  "doctor": Personas[7],
  "paciente": Personas[13],
  "fecha": new Date('2023/10/04'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[6]
},
{
  "id": 38,
  "doctor": Personas[1],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/20'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[7]
},
{
  "id": 39,
  "doctor": Personas[7],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/23'),
  "hora": "11:00 - 11:30",
  "categoria": categorias[8]
},
{
  "id": 40,
  "doctor": Personas[3],
  "paciente": Personas[20],
  "fecha": new Date('2023/10/19'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[9]
},
{
  "id": 41,
  "doctor": Personas[6],
  "paciente": Personas[18],
  "fecha": new Date('2023/10/30'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[0]
},
{
  "id": 42,
  "doctor": Personas[5],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/22'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[1]
},
{
  "id": 43,
  "doctor": Personas[0],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/27'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[2]
},
{
  "id": 44,
  "doctor": Personas[0],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/18'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[3]
},
{
  "id": 45,
  "doctor": Personas[9],
  "paciente": Personas[13],
  "fecha": new Date('2023/09/19'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[4]
},
{
  "id": 46,
  "doctor": Personas[2],
  "paciente": Personas[12],
  "fecha": new Date('2023/09/08'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[5]
},
{
  "id": 47,
  "doctor": Personas[3],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/11'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[6]
},
{
  "id": 48,
  "doctor": Personas[2],
  "paciente": Personas[20],
  "fecha": new Date('2023/10/04'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[7]
},
{
  "id": 49,
  "doctor": Personas[5],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/20'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[8]
},
{
  "id": 50,
  "doctor": Personas[0],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/16'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[9]
},
{
  "id": 51,
  "doctor": Personas[8],
  "paciente": Personas[13],
  "fecha": new Date('2023/09/17'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[0]
},
{
  "id": 52,
  "doctor": Personas[4],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/13'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[1]
},
{
  "id": 53,
  "doctor": Personas[2],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/12'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[2]
},
{
  "id": 54,
  "doctor": Personas[8],
  "paciente": Personas[11],
  "fecha": new Date('2023/09/26'),
  "hora": "13:30 - 14:00",
  "categoria": categorias[3]
},
{
  "id": 55,
  "doctor": Personas[4],
  "paciente": Personas[12],
  "fecha": new Date('2023/10/25'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[4]
},
{
  "id": 56,
  "doctor": Personas[1],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/06'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[5]
},
{
  "id": 57,
  "doctor": Personas[9],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/02'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[6]
},
{
  "id": 58,
  "doctor": Personas[9],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/31'),
  "hora": "15:30 - 16:00",
  "categoria": categorias[7]
},
{
  "id": 59,
  "doctor": Personas[2],
  "paciente": Personas[20],
  "fecha": new Date('2023/10/12'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[8]
},
{
  "id": 60,
  "doctor": Personas[7],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/15'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[9]
},
{
  "id": 61,
  "doctor": Personas[6],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/17'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[0]
},
{
  "id": 62,
  "doctor": Personas[2],
  "paciente": Personas[13],
  "fecha": new Date('2023/08/08'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[1]
},
{
  "id": 63,
  "doctor": Personas[7],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/23'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[2]
},
{
  "id": 64,
  "doctor": Personas[5],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/24'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[3]
},
{
  "id": 65,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/06'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[4]
},
{
  "id": 66,
  "doctor": Personas[8],
  "paciente": Personas[14],
  "fecha": new Date('2023/10/05'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[5]
},
{
  "id": 67,
  "doctor": Personas[2],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/30'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[6]
},
{
  "id": 68,
  "doctor": Personas[9],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/11'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[7]
},
{
  "id": 69,
  "doctor": Personas[5],
  "paciente": Personas[12],
  "fecha": new Date('2023/08/14'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[8]
},
{
  "id": 70,
  "doctor": Personas[2],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/06'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[9]
},
{
  "id": 71,
  "doctor": Personas[6],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/13'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[0]
},
{
  "id": 72,
  "doctor": Personas[2],
  "paciente": Personas[12],
  "fecha": new Date('2023/08/19'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[1]
},
{
  "id": 73,
  "doctor": Personas[9],
  "paciente": Personas[22],
  "fecha": new Date('2023/10/20'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[2]
},
{
  "id": 74,
  "doctor": Personas[9],
  "paciente": Personas[13],
  "fecha": new Date('2023/08/22'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[3]
},
{
  "id": 75,
  "doctor": Personas[1],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/18'),
  "hora": "18:00 - 18:30",
  "categoria": categorias[4]
},
{
  "id": 76,
  "doctor": Personas[0],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/07'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[5]
},
{
  "id": 77,
  "doctor": Personas[1],
  "paciente": Personas[18],
  "fecha": new Date('2023/10/16'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[6]
},
{
  "id": 78,
  "doctor": Personas[3],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/09'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[7]
},
{
  "id": 79,
  "doctor": Personas[7],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/03'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[8]
},
{
  "id": 80,
  "doctor": Personas[4],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/05'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[9]
},
{
  "id": 81,
  "doctor": Personas[1],
  "paciente": Personas[12],
  "fecha": new Date('2023/08/18'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[0]
},
{
  "id": 82,
  "doctor": Personas[5],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/19'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[1]
},
{
  "id": 83,
  "doctor": Personas[7],
  "paciente": Personas[13],
  "fecha": new Date('2023/10/30'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[2]
},
{
  "id": 84,
  "doctor": Personas[9],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/03'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[3]
},
{
  "id": 85,
  "doctor": Personas[4],
  "paciente": Personas[20],
  "fecha": new Date('2023/10/01'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[4]
},
{
  "id": 86,
  "doctor": Personas[1],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/14'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[5]
},
{
  "id": 87,
  "doctor": Personas[6],
  "paciente": Personas[14],
  "fecha": new Date('2023/09/09'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[6]
},
{
  "id": 88,
  "doctor": Personas[0],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/15'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[7]
},
{
  "id": 89,
  "doctor": Personas[7],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/26'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[8]
},
{
  "id": 90,
  "doctor": Personas[2],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/16'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[9]
},
{
  "id": 91,
  "doctor": Personas[4],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/21'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[0]
},
{
  "id": 92,
  "doctor": Personas[3],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/24'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[1]
},
{
  "id": 93,
  "doctor": Personas[6],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/22'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[2]
},
{
  "id": 94,
  "doctor": Personas[14],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/25'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[3]
},
{
  "id": 95,
  "doctor": Personas[15],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/13'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[4]
},
{
  "id": 96,
  "doctor": Personas[8],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/29'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[5]
},
{
  "id": 97,
  "doctor": Personas[9],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/25'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[6]
},
{
  "id": 98,
  "doctor": Personas[7],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/03'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[7]
},
{
  "id": 99,
  "doctor": Personas[0],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/31'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[8]
},
{
  "id": 100,
  "doctor": Personas[6],
  "paciente": Personas[14],
  "fecha": new Date('2023/09/12'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[9]
},
{
  "id": 101,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/07'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[0]
},
{
  "id": 102,
  "doctor": Personas[2],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/04'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[1]
},
{
  "id": 103,
  "doctor": Personas[5],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/16'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[2]
},
{
  "id": 104,
  "doctor": Personas[2],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/05'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[3]
},
{
  "id": 105,
  "doctor": Personas[9],
  "paciente": Personas[13],
  "fecha": new Date('2023/09/29'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[4]
},
{
  "id": 106,
  "doctor": Personas[1],
  "paciente": Personas[20],
  "fecha": new Date('2023/08/23'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[5]
},
{
  "id": 107,
  "doctor": Personas[8],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/20'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[6]
},
{
  "id": 108,
  "doctor": Personas[8],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/08'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[7]
},
{
  "id": 109,
  "doctor": Personas[4],
  "paciente": Personas[13],
  "fecha": new Date('2023/10/26'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[8]
},
{
  "id": 110,
  "doctor": Personas[7],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/20'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[9]
},
{
  "id": 111,
  "doctor": Personas[3],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/01'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[0]
},
{
  "id": 112,
  "doctor": Personas[3],
  "paciente": Personas[13],
  "fecha": new Date('2023/10/10'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[1]
},
{
  "id": 113,
  "doctor": Personas[2],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/28'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[2]
},
{
  "id": 114,
  "doctor": Personas[0],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/10'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[3]
},
{
  "id": 115,
  "doctor": Personas[9],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/04'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[4]
},
{
  "id": 116,
  "doctor": Personas[0],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/27'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[5]
},
{
  "id": 117,
  "doctor": Personas[7],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/07'),
  "hora": "15:30 - 16:00",
  "categoria": categorias[6]
},
{
  "id": 118,
  "doctor": Personas[5],
  "paciente": Personas[13],
  "fecha": new Date('2023/08/25'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[7]
},
{
  "id": 119,
  "doctor": Personas[0],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/14'),
  "hora": "18:00 - 18:30",
  "categoria": categorias[8]
},
{
  "id": 120,
  "doctor": Personas[8],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/07'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[9]
},
{
  "id": 121,
  "doctor": Personas[4],
  "paciente": Personas[23],
  "fecha": new Date('2023/10/16'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[0]
},
{
  "id": 122,
  "doctor": Personas[4],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/09'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[1]
},
{
  "id": 123,
  "doctor": Personas[2],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/18'),
  "hora": "11:00 - 11:30",
  "categoria": categorias[2]
},
{
  "id": 124,
  "doctor": Personas[3],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/30'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[3]
},
{
  "id": 125,
  "doctor": Personas[9],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/06'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[4]
},
{
  "id": 126,
  "doctor": Personas[1],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/13'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[5]
},
{
  "id": 127,
  "doctor": Personas[6],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/16'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[6]
},
{
  "id": 128,
  "doctor": Personas[7],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/25'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[7]
},
{
  "id": 129,
  "doctor": Personas[2],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/29'),
  "hora": "18:00 - 18:30",
  "categoria": categorias[8]
},
{
  "id": 130,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/08'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[9]
},
{
  "id": 131,
  "doctor": Personas[7],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/31'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[0]
},
{
  "id": 132,
  "doctor": Personas[1],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/23'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[1]
},
{
  "id": 133,
  "doctor": Personas[6],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/06'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[2]
},
{
  "id": 134,
  "doctor": Personas[8],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/14'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[3]
},
{
  "id": 135,
  "doctor": Personas[5],
  "paciente": Personas[14],
  "fecha": new Date('2023/10/03'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[4]
},
{
  "id": 136,
  "doctor": Personas[2],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/11'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[5]
},
{
  "id": 137,
  "doctor": Personas[0],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/29'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[6]
},
{
  "id": 138,
  "doctor": Personas[4],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/21'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[7]
},
{
  "id": 139,
  "doctor": Personas[2],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/01'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[8]
},
{
  "id": 140,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/12'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[9]
},
{
  "id": 141,
  "doctor": Personas[4],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/23'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[0]
},
{
  "id": 142,
  "doctor": Personas[7],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/27'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[1]
},
{
  "id": 143,
  "doctor": Personas[2],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/14'),
  "hora": "18:00 - 18:30",
  "categoria": categorias[2]
},
{
  "id": 144,
  "doctor": Personas[6],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/05'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[3]
},
{
  "id": 145,
  "doctor": Personas[3],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/19'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[4]
},
{
  "id": 146,
  "doctor": Personas[9],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/11'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[5]
},
{
  "id": 147,
  "doctor": Personas[4],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/25'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[6]
},
{
  "id": 148,
  "doctor": Personas[6],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/02'),
  "hora": "15:30 - 16:00",
  "categoria": categorias[7]
},
{
  "id": 149,
  "doctor": Personas[2],
  "paciente": Personas[17],
  "fecha": new Date('2023/10/10'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[8]
},
{
  "id": 150,
  "doctor": Personas[4],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/07'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[9]
},
{
  "id": 151,
  "doctor": Personas[7],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/13'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[0]
},
{
  "id": 152,
  "doctor": Personas[1],
  "paciente": Personas[19],
  "fecha": new Date('2023/09/10'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[1]
},
{
  "id": 153,
  "doctor": Personas[6],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/01'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[2]
},
{
  "id": 154,
  "doctor": Personas[8],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/08'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[3]
},
{
  "id": 155,
  "doctor": Personas[5],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/15'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[4]
},
{
  "id": 156,
  "doctor": Personas[2],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/28'),
  "hora": "15:00 - 15:30",
  "categoria": categorias[5]
},
{
  "id": 157,
  "doctor": Personas[6],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/06'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[6]
},
{
  "id": 158,
  "doctor": Personas[7],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/14'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[7]
},
{
  "id": 159,
  "doctor": Personas[2],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/21'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[8]
},
{
  "id": 160,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/30'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[9]
},
{
  "id": 161,
  "doctor": Personas[7],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/16'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[0]
},
{
  "id": 162,
  "doctor": Personas[1],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/13'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[1]
},
{
  "id": 163,
  "doctor": Personas[6],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/31'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[2]
},
{
  "id": 164,
  "doctor": Personas[8],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/19'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[3]
},
{
  "id": 165,
  "doctor": Personas[5],
  "paciente": Personas[23],
  "fecha": new Date('2023/10/07'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[4]
},
{
  "id": 166,
  "doctor": Personas[2],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/13'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[5]
},
{
  "id": 167,
  "doctor": Personas[0],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/25'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[6]
},
{
  "id": 168,
  "doctor": Personas[4],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/23'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[7]
},
{
  "id": 169,
  "doctor": Personas[2],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/04'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[8]
},
{
  "id": 170,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/09'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[9]
},
{
  "id": 171,
  "doctor": Personas[4],
  "paciente": Personas[22],
  "fecha": new Date('2023/10/02'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[0]
},
{
  "id": 172,
  "doctor": Personas[7],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/19'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[1]
},
{
  "id": 173,
  "doctor": Personas[9],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/11'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[2]
},
{
  "id": 174,
  "doctor": Personas[4],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/28'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[3]
},
{
  "id": 175,
  "doctor": Personas[2],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/16'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[4]
},
{
  "id": 176,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/17'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[5]
},
{
  "id": 177,
  "doctor": Personas[6],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/12'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[6]
},
{
  "id": 178,
  "doctor": Personas[2],
  "paciente": Personas[17],
  "fecha": new Date('2023/10/09'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[7]
},
{
  "id": 179,
  "doctor": Personas[4],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/24'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[8]
},
{
  "id": 180,
  "doctor": Personas[7],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/03'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[9]
},
{
  "id": 181,
  "doctor": Personas[1],
  "paciente": Personas[22],
  "fecha": new Date('2023/10/11'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[0]
},
{
  "id": 182,
  "doctor": Personas[6],
  "paciente": Personas[19],
  "fecha": new Date('2023/09/18'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[1]
},
{
  "id": 183,
  "doctor": Personas[8],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/25'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[2]
},
{
  "id": 184,
  "doctor": Personas[5],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/21'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[3]
},
{
  "id": 185,
  "doctor": Personas[2],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/03'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[4]
},
{
  "id": 186,
  "doctor": Personas[6],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/14'),
  "hora": "15:00 - 15:30",
  "categoria": categorias[5]
},
{
  "id": 187,
  "doctor": Personas[7],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/24'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[6]
},
{
  "id": 188,
  "doctor": Personas[2],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/10'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[7]
},
{
  "id": 189,
  "doctor": Personas[4],
  "paciente": Personas[17],
  "fecha": new Date('2023/10/02'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[8]
},
{
  "id": 190,
  "doctor": Personas[6],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/12'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[9]
},
{
  "id": 191,
  "doctor": Personas[8],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/20'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[0]
},
{
  "id": 192,
  "doctor": Personas[5],
  "paciente": Personas[19],
  "fecha": new Date('2023/09/17'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[1]
},
{
  "id": 193,
  "doctor": Personas[2],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/28'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[2]
},
{
  "id": 194,
  "doctor": Personas[6],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/05'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[3]
},
{
  "id": 195,
  "doctor": Personas[4],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/15'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[4]
},
{
  "id": 196,
  "doctor": Personas[2],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/08'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[5]
},
{
  "id": 197,
  "doctor": Personas[8],
  "paciente": Personas[19],
  "fecha": new Date('2023/09/30'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[6]
},
{
  "id": 198,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/24'),
  "hora": "11:00 - 11:30",
  "categoria": categorias[7]
},
{
  "id": 199,
  "doctor": Personas[7],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/07'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[8]
},
{
  "id": 200,
  "doctor": Personas[1],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/26'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[9]
}
    ];
    

--------------------------------------------------------------------------------
File: reserva.txt
Path: c:\Users\Mentormate\shared docs\FPUNA\FE_TP\patient-tracking-system\src\assets\data\reserva\reserva.txt
Content:
data_reserva.ts
import { Data_consulta as Categorias } from "../consulta/data_consulta";
import { ReservaDeTurno } from "src/app/components/reserva-de-turnos/reserva-de-turnos.interface";
import { Data_RegistroDePersonas as Personas } from "../RegistroDePersonas/RegistroDePersonas";

const categorias = Categorias;
export const data_DatosDeReservas: ReservaDeTurno[] =
    [
{
  "id": 1,
  "doctor": Personas[2],
  "paciente": Personas[13],
  "fecha": new Date('2023/08/01'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[0]
},
{
  "id": 2,
  "doctor": Personas[8],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/11'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[1]
},
{
  "id": 3,
  "doctor": Personas[5],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/29'),
  "hora": "15:00 - 15:30",
  "categoria": categorias[2]
},
{
  "id": 4,
  "doctor": Personas[0],
  "paciente": Personas[10],
  "fecha": new Date('2023/09/12'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[3]
},
{
  "id": 5,
  "doctor": Personas[9],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/15'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[4]
},
{
  "id": 6,
  "doctor": Personas[7],
  "paciente": Personas[18],
  "fecha": new Date('2023/10/30'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[5]
},
{
  "id": 7,
  "doctor": Personas[3],
  "paciente": Personas[11],
  "fecha": new Date('2023/09/09'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[6]
},
{
  "id": 8,
  "doctor": Personas[4],
  "paciente": Personas[12],
  "fecha": new Date('2023/09/26'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[7]
},
{
  "id": 9,
  "doctor": Personas[1],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/05'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[8]
},
{
  "id": 10,
  "doctor": Personas[6],
  "paciente": Personas[14],
  "fecha": new Date('2023/09/17'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[9]
},
{
  "id": 11,
  "doctor": Personas[2],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/09'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[0]
},
{
  "id": 12,
  "doctor": Personas[3],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/06'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[1]
},
{
  "id": 13,
  "doctor": Personas[9],
  "paciente": Personas[23],
  "fecha": new Date('2023/10/25'),
  "hora": "13:30 - 14:00",
  "categoria": categorias[2]
},
{
  "id": 14,
  "doctor": Personas[1],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/10'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[3]
},
{
  "id": 15,
  "doctor": Personas[5],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/30'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[4]
},
{
  "id": 16,
  "doctor": Personas[2],
  "paciente": Personas[11],
  "fecha": new Date('2023/08/02'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[5]
},
{
  "id": 17,
  "doctor": Personas[1],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/18'),
  "hora": "15:30 - 16:00",
  "categoria": categorias[6]
},
{
  "id": 18,
  "doctor": Personas[8],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/22'),
  "hora": "11:00 - 11:30",
  "categoria": categorias[7]
},
{
  "id": 19,
  "doctor": Personas[2],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/27'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[8]
},
{
  "id": 20,
  "doctor": Personas[8],
  "paciente": Personas[20],
  "fecha": new Date('2023/08/03'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[9]
},
{
  "id": 21,
  "doctor": Personas[2],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/15'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[0]
},
{
  "id": 22,
  "doctor": Personas[1],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/03'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[1]
},
{
  "id": 23,
  "doctor": Personas[6],
  "paciente": Personas[20],
  "fecha": new Date('2023/08/27'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[2]
},
{
  "id": 24,
  "doctor": Personas[6],
  "paciente": Personas[22],
  "fecha": new Date('2023/10/02'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[3]
},
{
  "id": 25,
  "doctor": Personas[7],
  "paciente": Personas[13],
  "fecha": new Date('2023/09/14'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[4]
},
{
  "id": 26,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/29'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[5]
},
{
  "id": 27,
  "doctor": Personas[9],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/07'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[6]
},
{
  "id": 28,
  "doctor": Personas[2],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/27'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[7]
},
{
  "id": 29,
  "doctor": Personas[5],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/14'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[8]
},
{
  "id": 30,
  "doctor": Personas[2],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/25'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[9]
},
{
  "id": 31,
  "doctor": Personas[3],
  "paciente": Personas[11],
  "fecha": new Date('2023/08/05'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[0]
},
{
  "id": 32,
  "doctor": Personas[4],
  "paciente": Personas[12],
  "fecha": new Date('2023/08/30'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[1]
},
{
  "id": 33,
  "doctor": Personas[1],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/16'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[2]
},
{
  "id": 34,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/09'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[3]
},
{
  "id": 35,
  "doctor": Personas[4],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/19'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[4]
},
{
  "id": 36,
  "doctor": Personas[3],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/11'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[5]
},
{
  "id": 37,
  "doctor": Personas[7],
  "paciente": Personas[13],
  "fecha": new Date('2023/10/04'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[6]
},
{
  "id": 38,
  "doctor": Personas[1],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/20'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[7]
},
{
  "id": 39,
  "doctor": Personas[7],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/23'),
  "hora": "11:00 - 11:30",
  "categoria": categorias[8]
},
{
  "id": 40,
  "doctor": Personas[3],
  "paciente": Personas[20],
  "fecha": new Date('2023/10/19'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[9]
},
{
  "id": 41,
  "doctor": Personas[6],
  "paciente": Personas[18],
  "fecha": new Date('2023/10/30'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[0]
},
{
  "id": 42,
  "doctor": Personas[5],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/22'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[1]
},
{
  "id": 43,
  "doctor": Personas[0],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/27'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[2]
},
{
  "id": 44,
  "doctor": Personas[0],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/18'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[3]
},
{
  "id": 45,
  "doctor": Personas[9],
  "paciente": Personas[13],
  "fecha": new Date('2023/09/19'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[4]
},
{
  "id": 46,
  "doctor": Personas[2],
  "paciente": Personas[12],
  "fecha": new Date('2023/09/08'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[5]
},
{
  "id": 47,
  "doctor": Personas[3],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/11'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[6]
},
{
  "id": 48,
  "doctor": Personas[2],
  "paciente": Personas[20],
  "fecha": new Date('2023/10/04'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[7]
},
{
  "id": 49,
  "doctor": Personas[5],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/20'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[8]
},
{
  "id": 50,
  "doctor": Personas[0],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/16'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[9]
},
{
  "id": 51,
  "doctor": Personas[8],
  "paciente": Personas[13],
  "fecha": new Date('2023/09/17'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[0]
},
{
  "id": 52,
  "doctor": Personas[4],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/13'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[1]
},
{
  "id": 53,
  "doctor": Personas[2],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/12'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[2]
},
{
  "id": 54,
  "doctor": Personas[8],
  "paciente": Personas[11],
  "fecha": new Date('2023/09/26'),
  "hora": "13:30 - 14:00",
  "categoria": categorias[3]
},
{
  "id": 55,
  "doctor": Personas[4],
  "paciente": Personas[12],
  "fecha": new Date('2023/10/25'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[4]
},
{
  "id": 56,
  "doctor": Personas[1],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/06'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[5]
},
{
  "id": 57,
  "doctor": Personas[9],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/02'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[6]
},
{
  "id": 58,
  "doctor": Personas[9],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/31'),
  "hora": "15:30 - 16:00",
  "categoria": categorias[7]
},
{
  "id": 59,
  "doctor": Personas[2],
  "paciente": Personas[20],
  "fecha": new Date('2023/10/12'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[8]
},
{
  "id": 60,
  "doctor": Personas[7],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/15'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[9]
},
{
  "id": 61,
  "doctor": Personas[6],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/17'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[0]
},
{
  "id": 62,
  "doctor": Personas[2],
  "paciente": Personas[13],
  "fecha": new Date('2023/08/08'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[1]
},
{
  "id": 63,
  "doctor": Personas[7],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/23'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[2]
},
{
  "id": 64,
  "doctor": Personas[5],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/24'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[3]
},
{
  "id": 65,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/06'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[4]
},
{
  "id": 66,
  "doctor": Personas[8],
  "paciente": Personas[14],
  "fecha": new Date('2023/10/05'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[5]
},
{
  "id": 67,
  "doctor": Personas[2],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/30'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[6]
},
{
  "id": 68,
  "doctor": Personas[9],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/11'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[7]
},
{
  "id": 69,
  "doctor": Personas[5],
  "paciente": Personas[12],
  "fecha": new Date('2023/08/14'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[8]
},
{
  "id": 70,
  "doctor": Personas[2],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/06'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[9]
},
{
  "id": 71,
  "doctor": Personas[6],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/13'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[0]
},
{
  "id": 72,
  "doctor": Personas[2],
  "paciente": Personas[12],
  "fecha": new Date('2023/08/19'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[1]
},
{
  "id": 73,
  "doctor": Personas[9],
  "paciente": Personas[22],
  "fecha": new Date('2023/10/20'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[2]
},
{
  "id": 74,
  "doctor": Personas[9],
  "paciente": Personas[13],
  "fecha": new Date('2023/08/22'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[3]
},
{
  "id": 75,
  "doctor": Personas[1],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/18'),
  "hora": "18:00 - 18:30",
  "categoria": categorias[4]
},
{
  "id": 76,
  "doctor": Personas[0],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/07'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[5]
},
{
  "id": 77,
  "doctor": Personas[1],
  "paciente": Personas[18],
  "fecha": new Date('2023/10/16'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[6]
},
{
  "id": 78,
  "doctor": Personas[3],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/09'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[7]
},
{
  "id": 79,
  "doctor": Personas[7],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/03'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[8]
},
{
  "id": 80,
  "doctor": Personas[4],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/05'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[9]
},
{
  "id": 81,
  "doctor": Personas[1],
  "paciente": Personas[12],
  "fecha": new Date('2023/08/18'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[0]
},
{
  "id": 82,
  "doctor": Personas[5],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/19'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[1]
},
{
  "id": 83,
  "doctor": Personas[7],
  "paciente": Personas[13],
  "fecha": new Date('2023/10/30'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[2]
},
{
  "id": 84,
  "doctor": Personas[9],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/03'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[3]
},
{
  "id": 85,
  "doctor": Personas[4],
  "paciente": Personas[20],
  "fecha": new Date('2023/10/01'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[4]
},
{
  "id": 86,
  "doctor": Personas[1],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/14'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[5]
},
{
  "id": 87,
  "doctor": Personas[6],
  "paciente": Personas[14],
  "fecha": new Date('2023/09/09'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[6]
},
{
  "id": 88,
  "doctor": Personas[0],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/15'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[7]
},
{
  "id": 89,
  "doctor": Personas[7],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/26'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[8]
},
{
  "id": 90,
  "doctor": Personas[2],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/16'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[9]
},
{
  "id": 91,
  "doctor": Personas[4],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/21'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[0]
},
{
  "id": 92,
  "doctor": Personas[3],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/24'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[1]
},
{
  "id": 93,
  "doctor": Personas[6],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/22'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[2]
},
{
  "id": 94,
  "doctor": Personas[14],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/25'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[3]
},
{
  "id": 95,
  "doctor": Personas[15],
  "paciente": Personas[15],
  "fecha": new Date('2023/09/13'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[4]
},
{
  "id": 96,
  "doctor": Personas[8],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/29'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[5]
},
{
  "id": 97,
  "doctor": Personas[9],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/25'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[6]
},
{
  "id": 98,
  "doctor": Personas[7],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/03'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[7]
},
{
  "id": 99,
  "doctor": Personas[0],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/31'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[8]
},
{
  "id": 100,
  "doctor": Personas[6],
  "paciente": Personas[14],
  "fecha": new Date('2023/09/12'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[9]
},
{
  "id": 101,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/07'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[0]
},
{
  "id": 102,
  "doctor": Personas[2],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/04'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[1]
},
{
  "id": 103,
  "doctor": Personas[5],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/16'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[2]
},
{
  "id": 104,
  "doctor": Personas[2],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/05'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[3]
},
{
  "id": 105,
  "doctor": Personas[9],
  "paciente": Personas[13],
  "fecha": new Date('2023/09/29'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[4]
},
{
  "id": 106,
  "doctor": Personas[1],
  "paciente": Personas[20],
  "fecha": new Date('2023/08/23'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[5]
},
{
  "id": 107,
  "doctor": Personas[8],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/20'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[6]
},
{
  "id": 108,
  "doctor": Personas[8],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/08'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[7]
},
{
  "id": 109,
  "doctor": Personas[4],
  "paciente": Personas[13],
  "fecha": new Date('2023/10/26'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[8]
},
{
  "id": 110,
  "doctor": Personas[7],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/20'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[9]
},
{
  "id": 111,
  "doctor": Personas[3],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/01'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[0]
},
{
  "id": 112,
  "doctor": Personas[3],
  "paciente": Personas[13],
  "fecha": new Date('2023/10/10'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[1]
},
{
  "id": 113,
  "doctor": Personas[2],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/28'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[2]
},
{
  "id": 114,
  "doctor": Personas[0],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/10'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[3]
},
{
  "id": 115,
  "doctor": Personas[9],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/04'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[4]
},
{
  "id": 116,
  "doctor": Personas[0],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/27'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[5]
},
{
  "id": 117,
  "doctor": Personas[7],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/07'),
  "hora": "15:30 - 16:00",
  "categoria": categorias[6]
},
{
  "id": 118,
  "doctor": Personas[5],
  "paciente": Personas[13],
  "fecha": new Date('2023/08/25'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[7]
},
{
  "id": 119,
  "doctor": Personas[0],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/14'),
  "hora": "18:00 - 18:30",
  "categoria": categorias[8]
},
{
  "id": 120,
  "doctor": Personas[8],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/07'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[9]
},
{
  "id": 121,
  "doctor": Personas[4],
  "paciente": Personas[23],
  "fecha": new Date('2023/10/16'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[0]
},
{
  "id": 122,
  "doctor": Personas[4],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/09'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[1]
},
{
  "id": 123,
  "doctor": Personas[2],
  "paciente": Personas[20],
  "fecha": new Date('2023/09/18'),
  "hora": "11:00 - 11:30",
  "categoria": categorias[2]
},
{
  "id": 124,
  "doctor": Personas[3],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/30'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[3]
},
{
  "id": 125,
  "doctor": Personas[9],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/06'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[4]
},
{
  "id": 126,
  "doctor": Personas[1],
  "paciente": Personas[14],
  "fecha": new Date('2023/08/13'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[5]
},
{
  "id": 127,
  "doctor": Personas[6],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/16'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[6]
},
{
  "id": 128,
  "doctor": Personas[7],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/25'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[7]
},
{
  "id": 129,
  "doctor": Personas[2],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/29'),
  "hora": "18:00 - 18:30",
  "categoria": categorias[8]
},
{
  "id": 130,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/08'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[9]
},
{
  "id": 131,
  "doctor": Personas[7],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/31'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[0]
},
{
  "id": 132,
  "doctor": Personas[1],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/23'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[1]
},
{
  "id": 133,
  "doctor": Personas[6],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/06'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[2]
},
{
  "id": 134,
  "doctor": Personas[8],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/14'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[3]
},
{
  "id": 135,
  "doctor": Personas[5],
  "paciente": Personas[14],
  "fecha": new Date('2023/10/03'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[4]
},
{
  "id": 136,
  "doctor": Personas[2],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/11'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[5]
},
{
  "id": 137,
  "doctor": Personas[0],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/29'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[6]
},
{
  "id": 138,
  "doctor": Personas[4],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/21'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[7]
},
{
  "id": 139,
  "doctor": Personas[2],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/01'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[8]
},
{
  "id": 140,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/12'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[9]
},
{
  "id": 141,
  "doctor": Personas[4],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/23'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[0]
},
{
  "id": 142,
  "doctor": Personas[7],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/27'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[1]
},
{
  "id": 143,
  "doctor": Personas[2],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/14'),
  "hora": "18:00 - 18:30",
  "categoria": categorias[2]
},
{
  "id": 144,
  "doctor": Personas[6],
  "paciente": Personas[15],
  "fecha": new Date('2023/10/05'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[3]
},
{
  "id": 145,
  "doctor": Personas[3],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/19'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[4]
},
{
  "id": 146,
  "doctor": Personas[9],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/11'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[5]
},
{
  "id": 147,
  "doctor": Personas[4],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/25'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[6]
},
{
  "id": 148,
  "doctor": Personas[6],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/02'),
  "hora": "15:30 - 16:00",
  "categoria": categorias[7]
},
{
  "id": 149,
  "doctor": Personas[2],
  "paciente": Personas[17],
  "fecha": new Date('2023/10/10'),
  "hora": "12:00 - 12:30",
  "categoria": categorias[8]
},
{
  "id": 150,
  "doctor": Personas[4],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/07'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[9]
},
{
  "id": 151,
  "doctor": Personas[7],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/13'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[0]
},
{
  "id": 152,
  "doctor": Personas[1],
  "paciente": Personas[19],
  "fecha": new Date('2023/09/10'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[1]
},
{
  "id": 153,
  "doctor": Personas[6],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/01'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[2]
},
{
  "id": 154,
  "doctor": Personas[8],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/08'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[3]
},
{
  "id": 155,
  "doctor": Personas[5],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/15'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[4]
},
{
  "id": 156,
  "doctor": Personas[2],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/28'),
  "hora": "15:00 - 15:30",
  "categoria": categorias[5]
},
{
  "id": 157,
  "doctor": Personas[6],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/06'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[6]
},
{
  "id": 158,
  "doctor": Personas[7],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/14'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[7]
},
{
  "id": 159,
  "doctor": Personas[2],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/21'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[8]
},
{
  "id": 160,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/08/30'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[9]
},
{
  "id": 161,
  "doctor": Personas[7],
  "paciente": Personas[15],
  "fecha": new Date('2023/08/16'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[0]
},
{
  "id": 162,
  "doctor": Personas[1],
  "paciente": Personas[22],
  "fecha": new Date('2023/09/13'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[1]
},
{
  "id": 163,
  "doctor": Personas[6],
  "paciente": Personas[19],
  "fecha": new Date('2023/08/31'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[2]
},
{
  "id": 164,
  "doctor": Personas[8],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/19'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[3]
},
{
  "id": 165,
  "doctor": Personas[5],
  "paciente": Personas[23],
  "fecha": new Date('2023/10/07'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[4]
},
{
  "id": 166,
  "doctor": Personas[2],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/13'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[5]
},
{
  "id": 167,
  "doctor": Personas[0],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/25'),
  "hora": "10:00 - 10:30",
  "categoria": categorias[6]
},
{
  "id": 168,
  "doctor": Personas[4],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/23'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[7]
},
{
  "id": 169,
  "doctor": Personas[2],
  "paciente": Personas[17],
  "fecha": new Date('2023/09/04'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[8]
},
{
  "id": 170,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/09'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[9]
},
{
  "id": 171,
  "doctor": Personas[4],
  "paciente": Personas[22],
  "fecha": new Date('2023/10/02'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[0]
},
{
  "id": 172,
  "doctor": Personas[7],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/19'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[1]
},
{
  "id": 173,
  "doctor": Personas[9],
  "paciente": Personas[21],
  "fecha": new Date('2023/09/11'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[2]
},
{
  "id": 174,
  "doctor": Personas[4],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/28'),
  "hora": "18:30 - 19:00",
  "categoria": categorias[3]
},
{
  "id": 175,
  "doctor": Personas[2],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/16'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[4]
},
{
  "id": 176,
  "doctor": Personas[8],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/17'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[5]
},
{
  "id": 177,
  "doctor": Personas[6],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/12'),
  "hora": "08:00 - 08:30",
  "categoria": categorias[6]
},
{
  "id": 178,
  "doctor": Personas[2],
  "paciente": Personas[17],
  "fecha": new Date('2023/10/09'),
  "hora": "11:30 - 12:00",
  "categoria": categorias[7]
},
{
  "id": 179,
  "doctor": Personas[4],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/24'),
  "hora": "20:00 - 20:30",
  "categoria": categorias[8]
},
{
  "id": 180,
  "doctor": Personas[7],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/03'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[9]
},
{
  "id": 181,
  "doctor": Personas[1],
  "paciente": Personas[22],
  "fecha": new Date('2023/10/11'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[0]
},
{
  "id": 182,
  "doctor": Personas[6],
  "paciente": Personas[19],
  "fecha": new Date('2023/09/18'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[1]
},
{
  "id": 183,
  "doctor": Personas[8],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/25'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[2]
},
{
  "id": 184,
  "doctor": Personas[5],
  "paciente": Personas[23],
  "fecha": new Date('2023/09/21'),
  "hora": "16:30 - 17:00",
  "categoria": categorias[3]
},
{
  "id": 185,
  "doctor": Personas[2],
  "paciente": Personas[18],
  "fecha": new Date('2023/08/03'),
  "hora": "14:00 - 14:30",
  "categoria": categorias[4]
},
{
  "id": 186,
  "doctor": Personas[6],
  "paciente": Personas[19],
  "fecha": new Date('2023/10/14'),
  "hora": "15:00 - 15:30",
  "categoria": categorias[5]
},
{
  "id": 187,
  "doctor": Personas[7],
  "paciente": Personas[16],
  "fecha": new Date('2023/09/24'),
  "hora": "10:30 - 11:00",
  "categoria": categorias[6]
},
{
  "id": 188,
  "doctor": Personas[2],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/10'),
  "hora": "09:00 - 09:30",
  "categoria": categorias[7]
},
{
  "id": 189,
  "doctor": Personas[4],
  "paciente": Personas[17],
  "fecha": new Date('2023/10/02'),
  "hora": "17:00 - 17:30",
  "categoria": categorias[8]
},
{
  "id": 190,
  "doctor": Personas[6],
  "paciente": Personas[16],
  "fecha": new Date('2023/08/12'),
  "hora": "19:30 - 20:00",
  "categoria": categorias[9]
},
{
  "id": 191,
  "doctor": Personas[8],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/20'),
  "hora": "09:30 - 10:00",
  "categoria": categorias[0]
},
{
  "id": 192,
  "doctor": Personas[5],
  "paciente": Personas[19],
  "fecha": new Date('2023/09/17'),
  "hora": "13:00 - 13:30",
  "categoria": categorias[1]
},
{
  "id": 193,
  "doctor": Personas[2],
  "paciente": Personas[22],
  "fecha": new Date('2023/08/28'),
  "hora": "12:30 - 13:00",
  "categoria": categorias[2]
},
{
  "id": 194,
  "doctor": Personas[6],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/05'),
  "hora": "14:30 - 15:00",
  "categoria": categorias[3]
},
{
  "id": 195,
  "doctor": Personas[4],
  "paciente": Personas[16],
  "fecha": new Date('2023/10/15'),
  "hora": "17:30 - 18:00",
  "categoria": categorias[4]
},
{
  "id": 196,
  "doctor": Personas[2],
  "paciente": Personas[23],
  "fecha": new Date('2023/08/08'),
  "hora": "19:00 - 19:30",
  "categoria": categorias[5]
},
{
  "id": 197,
  "doctor": Personas[8],
  "paciente": Personas[19],
  "fecha": new Date('2023/09/30'),
  "hora": "16:00 - 16:30",
  "categoria": categorias[6]
},
{
  "id": 198,
  "doctor": Personas[4],
  "paciente": Personas[21],
  "fecha": new Date('2023/10/24'),
  "hora": "11:00 - 11:30",
  "categoria": categorias[7]
},
{
  "id": 199,
  "doctor": Personas[7],
  "paciente": Personas[18],
  "fecha": new Date('2023/09/07'),
  "hora": "08:30 - 09:00",
  "categoria": categorias[8]
},
{
  "id": 200,
  "doctor": Personas[1],
  "paciente": Personas[17],
  "fecha": new Date('2023/08/26'),
  "hora": "20:30 - 21:00",
  "categoria": categorias[9]
}
    ];
    



--------------------------------------------------------------------------------
